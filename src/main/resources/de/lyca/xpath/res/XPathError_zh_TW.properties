
error0000 = {0}

currentNotAllowedInMatch = \u5728\u6BD4\u5C0D\u578B\u6A23\u4E2D\u4E0D\u5141\u8A31\u4F7F\u7528 current() \u51FD\u6578\uFF01

currentTakesNoArgs = current() \u51FD\u6578\u4E0D\u63A5\u53D7\u5F15\u6578\uFF01

documentReplaced = document() \u51FD\u6578\u5BE6\u4F5C\u5DF2\u88AB de.lyca.xalan.xslt.FuncDocument \u53D6\u4EE3\uFF01

contextHasNoOwnerdoc = \u74B0\u5883\u5B9A\u7FA9\u6C92\u6709\u64C1\u6709\u8005\u6587\u4EF6\uFF01

localnameHasTooManyArgs = local-name() \u6709\u592A\u591A\u5F15\u6578\u3002

namespaceuriHasTooManyArgs = namespace-uri() \u6709\u592A\u591A\u5F15\u6578\u3002

normalizespaceHasTooManyArgs = normalize-space() \u6709\u592A\u591A\u5F15\u6578\u3002

numberHasTooManyArgs = number() \u6709\u592A\u591A\u5F15\u6578\u3002

nameHasTooManyArgs = name() \u6709\u592A\u591A\u5F15\u6578\u3002

stringHasTooManyArgs = string() \u6709\u592A\u591A\u5F15\u6578\u3002

stringlengthHasTooManyArgs = string-length() \u6709\u592A\u591A\u5F15\u6578\u3002

translateTakes3Args = translate() \u51FD\u6578\u9700\u8981 3 \u500B\u5F15\u6578\uFF01

unparsedentityuriTakes1Arg = unparsed-entity-uri \u51FD\u6578\u53EA\u9700\u8981 1 \u500B\u5F15\u6578\uFF01

namespaceaxisNotImplemented = namespace axis \u5C1A\u672A\u5BE6\u4F5C\uFF01

unknownAxis = \u4E0D\u660E\u8EF8\uFF1A{0}

unknownMatchOperation = \u4E0D\u660E\u7684\u6BD4\u5C0D\u4F5C\u696D\uFF01

incorrectArgLength = processing-instruction() \u7BC0\u9EDE\u6E2C\u8A66\u7684\u5F15\u6578\u9577\u5EA6\u4E0D\u6B63\u78BA\uFF01

cantConvertToNumber = {0} \u7121\u6CD5\u8F49\u63DB\u70BA\u6578\u5B57

cantConvertToNodelist = {0} \u7121\u6CD5\u8F49\u63DB\u70BA NodeList\uFF01

cantConvertToMutablenodelist = {0} \u7121\u6CD5\u8F49\u63DB\u70BA NodeSetDTM\uFF01

cantConvertToType = \u7121\u6CD5\u5C07 {0} \u8F49\u63DB\u70BA type\#{1}

expectedMatchPattern = \u539F\u9810\u671F\u5728 getMatchScore \u4E2D\u6703\u51FA\u73FE\u6BD4\u5C0D\u578B\u6A23\uFF01

couldnotGetVarNamed = \u7121\u6CD5\u53D6\u5F97\u8B8A\u6578\u540D\u7A31 {0}

unknownOpcode = \u932F\u8AA4\uFF01\u4E0D\u660E\u4F5C\u696D\u78BC\uFF1A{0}

extraIllegalTokens = \u984D\u5916\u7684\u4E0D\u5408\u6CD5\u8A18\u865F\uFF1A{0}

expectedDoubleQuote = \u62EC\u932F\u5F15\u865F\u7684\u6587\u5B57... \u539F\u9810\u671F\u70BA\u96D9\u5F15\u865F\uFF01

expectedSingleQuote = \u62EC\u932F\u5F15\u865F\u7684\u6587\u5B57... \u539F\u9810\u671F\u70BA\u55AE\u5F15\u865F\uFF01

emptyExpression = \u7A7A\u7684\u8868\u793A\u5F0F\uFF01

expectedButFound = \u539F\u9810\u671F\u70BA {0}\uFF0C\u537B\u767C\u73FE\uFF1A{1}

incorrectProgrammerAssertion = \u7A0B\u5F0F\u8A2D\u8A08\u5E2B\u5047\u8A2D(Programmer assertion)\u4E0D\u6B63\u78BA\uFF01- {0}

booleanArgNoLongerOptional = boolean(...) \u5F15\u6578\u5728 19990709 XPath \u521D\u7A3F\u4E2D\u4E0D\u518D\u662F\u53EF\u9078\u7528\u7684\u3002

foundCommaButNoPrecedingArg = \u627E\u5230 ','\uFF0C\u4F46\u4E4B\u524D\u6C92\u6709\u5F15\u6578\uFF01

foundCommaButNoFollowingArg = \u627E\u5230 ','\uFF0C\u4F46\u4E4B\u5F8C\u6C92\u6709\u5F15\u6578\uFF01

predicateIllegalSyntax = '..[predicate]' \u6216 '.[predicate]' \u662F\u4E0D\u5408\u6CD5\u8A9E\u6CD5\u3002\u8ACB\u6539\u7528 'self\:\:node()[predicate]'\u3002

illegalAxisName = \u4E0D\u5408\u6CD5\u8EF8\u540D\u7A31\uFF1A{0}

unknownNodetype = \u4E0D\u660E\u7BC0\u9EDE\u985E\u578B\uFF1A{0}

patternLiteralNeedsBeQuoted = \u578B\u6A23\u6587\u5B57 ({0}) \u9700\u8981\u7528\u5F15\u865F\u62EC\u4F4F\uFF01

couldnotBeFormattedToNumber = {0} \u7121\u6CD5\u683C\u5F0F\u5316\u70BA\u6578\u5B57\uFF01

couldnotCreateXmlprocessorliaison = \u7121\u6CD5\u5EFA\u7ACB XML TransformerFactory Liaison\uFF1A{0}

didnotFindXpathSelectExp = \u932F\u8AA4\uFF01\u6C92\u6709\u627E\u5230 xpath select \u8868\u793A\u5F0F (-select)\u3002

couldnotFindEndopAfterOplocationpath = \u932F\u8AA4\uFF01\u5728 OP_LOCATIONPATH \u4E4B\u5F8C\u627E\u4E0D\u5230 ENDOP

errorOccured = \u767C\u751F\u932F\u8AA4\uFF01

illegalVariableReference = \u63D0\u4F9B\u7D66\u8B8A\u6578\u7684 VariableReference \u8D85\u51FA\u74B0\u5883\u5B9A\u7FA9\u6216\u6C92\u6709\u5B9A\u7FA9\uFF01\u540D\u7A31 \= {0}

axesNotAllowed = \u6BD4\u5C0D\u578B\u6A23\u4E2D\u53EA\u63A5\u53D7 child\:\: \u4EE5\u53CA attribute\:\: \u5169\u7A2E\u8EF8\uFF01\u4E0D\u7576\u7684\u8EF8 \= {0}

keyHasTooManyArgs = key() \u542B\u6709\u4E0D\u6B63\u78BA\u5F15\u6578\u6578\u76EE\u3002

countTakes1Arg = count \u51FD\u6578\u53EA\u9700\u8981\u4E00\u500B\u5F15\u6578\uFF01

couldnotFindFunction = \u627E\u4E0D\u5230\u51FD\u6578\uFF1A{0}

unsupportedEncoding = \u4E0D\u652F\u63F4\u7DE8\u78BC\uFF1A{0}

problemInDtmNextsibling = getNextSibling \u6642\u5728 DTM \u767C\u751F\u554F\u984C... \u5617\u8A66\u56DE\u5FA9

cannotWriteToEmptynodelistimpl = \u7A0B\u5F0F\u8A2D\u8A08\u5E2B\u932F\u8AA4\uFF1A\u7121\u6CD5\u5BEB\u5165 EmptyNodeList\u3002

setdomfactoryNotSupported = setDOMFactory \u4E0D\u53D7 XPathContext \u652F\u63F4\uFF01

prefixMustResolve = \u5B57\u9996\u5FC5\u9808\u89E3\u6790\u70BA\u540D\u7A31\u7A7A\u9593\uFF1A{0}

parseNotSupported = \u5728 XPathContext \u4E2D\u4E0D\u652F\u63F4\u5256\u6790\uFF08InputSource \u539F\u59CB\u6A94\uFF09\uFF01\u7121\u6CD5\u958B\u555F {0}

saxApiNotHandled = SAX API character(char ch[]... \u4E0D\u80FD\u88AB DTM \u8655\u7406\uFF01

ignorableWhitespaceNotHandled = ignorableWhitespace(char ch[]... \u4E0D\u80FD\u88AB DTM \u8655\u7406\uFF01

dtmCannotHandleNodes = DTMLiaison \u4E0D\u80FD\u8655\u7406 {0} \u985E\u578B\u7684\u7BC0\u9EDE

xercesCannotHandleNodes = DOM2Helper \u4E0D\u80FD\u8655\u7406 {0} \u985E\u578B\u7684\u7BC0\u9EDE

xercesParseErrorDetails = DOM2Helper.parse \u932F\u8AA4\uFF1ASystemID - {0} \u884C - {1}

xercesParseError = DOM2Helper.parse \u932F\u8AA4

invalidUtf16Surrogate = \u5075\u6E2C\u5230\u7121\u6548\u7684 UTF-16 \u4EE3\u7406\uFF1A{0}?

oierror = IO \u932F\u8AA4

cannotCreateUrl = \u7121\u6CD5\u91DD\u5C0D\uFF1A{0} \u5EFA\u7ACB URL

xpathReadobject = \u4F4D\u65BC XPath.readObject\uFF1A{0}

functionTokenNotFound = \u627E\u4E0D\u5230\u51FD\u6578\u8A18\u865F\u3002

cannotDealXpathType = \u7121\u6CD5\u8655\u7406 XPath \u985E\u578B\uFF1A{0}

nodesetNotMutable = \u6B64 NodeSet \u4E0D\u662F\u6613\u8B8A\u7684

nodesetdtmNotMutable = \u6B64 NodeSetDTM \u4E0D\u662F\u6613\u8B8A\u7684

varNotResolvable = \u8B8A\u6578\u7121\u6CD5\u89E3\u6790\uFF1A{0}

nullErrorHandler = \u7A7A\u503C\u932F\u8AA4\u8655\u7406\u7A0B\u5F0F

progAssertUnknownOpcode = \u7A0B\u5F0F\u8A2D\u8A08\u5E2B\u7684\u78BA\u8A8D\uFF1A\u4E0D\u660E\u4F5C\u696D\u78BC\uFF1A{0}

zeroOrOne = 0 \u6216 1

rtfNotSupportedXrtreefragselectwrapper = rtf() \u4E0D\u53D7 XRTreeFragSelectWrapper \u652F\u63F4

asnodeiteratorNotSupportedXrtreefragselectwrapper = asNodeIterator() \u4E0D\u53D7 XRTreeFragSelectWrapper \u652F\u63F4

detachNotSupportedXrtreefragselectwrapper = detach() \u4E0D\u53D7 XRTreeFragSelectWrapper \u652F\u63F4

# num() not supported by XRTreeFragSelectWrapper
numNotSupportedXrtreefragselectwrapper = num() \u4E0D\u53D7 XRTreeFragSelectWrapper \u652F\u63F4

# xstr() not supported by XRTreeFragSelectWrapper
xstrNotSupportedXrtreefragselectwrapper = xstr() \u4E0D\u53D7 XRTreeFragSelectWrapper \u652F\u63F4

# str() not supported by XRTreeFragSelectWrapper
strNotSupportedXrtreefragselectwrapper = str() \u4E0D\u53D7 XRTreeFragSelectWrapper \u652F\u63F4

fsbNotSupportedXstringforchars = fsb() \u4E0D\u53D7 XStringForChars \u652F\u63F4

couldNotFindVar = \u627E\u4E0D\u5230\u540D\u7A31\u70BA {0} \u7684\u8B8A\u6578

xstringforcharsCannotTakeString = XStringForChars \u4E0D\u63A5\u53D7\u5B57\u4E32\u4F5C\u70BA\u5F15\u6578

faststringbufferCannotBeNull = FastStringBuffer \u5F15\u6578\u4E0D\u53EF\u70BA\u7A7A\u503C

twoOrThree = 2 \u6216 3

variableAccessedBeforeBind = \u8B8A\u6578\u5728\u9023\u7D50\u4E4B\u524D\u5373\u88AB\u5B58\u53D6\uFF01

fsbCannotTakeString = XStringForFSB \u4E0D\u53EF\u4F7F\u7528\u5B57\u4E32\u4F5C\u70BA\u5F15\u6578\uFF01

settingWalkerRootToNull = \n\!\!\!\! \u932F\u8AA4\uFF01\u8A2D\u5B9A Walker \u7684\u6839\u76EE\u9304\u70BA\u7A7A\u503C\!\!\!

nodesetdtmCannotIterate = \u6B64 NodeSetDTM \u4E0D\u53EF\u758A\u4EE3\u70BA\u524D\u4E00\u500B\u7BC0\u9EDE\uFF01

nodesetCannotIterate = \u6B64 NodeSet \u4E0D\u53EF\u758A\u4EE3\u70BA\u524D\u4E00\u500B\u7BC0\u9EDE\uFF01

nodesetdtmCannotIndex = \u6B64 NodeSetDTM \u4E0D\u53EF\u57F7\u884C\u6AA2\u7D22\u6216\u8A08\u6578\u529F\u80FD\uFF01

nodesetCannotIndex = \u6B64 NodeSet \u4E0D\u53EF\u57F7\u884C\u6AA2\u7D22\u6216\u8A08\u6578\u529F\u80FD\uFF01

cannotCallSetshouldcachenode = \u5728\u547C\u53EB nextNode \u4E4B\u5F8C\u4E0D\u80FD\u547C\u53EB setShouldCacheNodes\u3002

onlyAllows = {0} \u53EA\u5141\u8A31 {1} \u5F15\u6578

unknownStep = \u7A0B\u5F0F\u8A2D\u8A08\u5E2B\u5728 getNextStepPos \u4E2D\u7684\u78BA\u8A8D\uFF1A\u4E0D\u660E\u7684 stepType\uFF1A{0}

# Note to translators: A relative location path is a form of XPath expression.
# The message indicates that such an expression was expected following the
# characters '/' or '//', but was not found.
expectedRelLocPath = \u9810\u671F\u5728 '/' \u6216 '//' \u8A18\u865F\u4E4B\u5F8C\u70BA\u76F8\u5C0D\u7684\u4F4D\u7F6E\u8DEF\u5F91\u3002

# Note to translators: A location path is a form of XPath expression.
# The message indicates that syntactically such an expression was expected,but
# the characters specified by the substitution text were encountered instead.
expectedLocPath = \u5FC5\u9808\u662F\u4F4D\u7F6E\u8DEF\u5F91\uFF0C\u537B\u9047\u5230\u4E0B\u5217\u8A18\u865F\:  {0}

# Note to translators: A location path is a form of XPath expression.
# The message indicates that syntactically such a subexpression was expected,
# but no more characters were found in the expression.
expectedLocPathAtEndExpr = \u539F\u9810\u671F\u70BA\u4F4D\u7F6E\u8DEF\u5F91\uFF0C\u4F46\u627E\u5230\u7684\u537B\u662F XPath \u8868\u793A\u5F0F\u7684\u7D50\u5C3E\u3002

# Note to translators: A location step is part of an XPath expression.
# The message indicates that syntactically such an expression was expected
# following the specified characters.
expectedLocStep = \u9810\u671F\u5728 '/' \u6216 '//' \u8A18\u865F\u4E4B\u5F8C\u70BA location step\u3002

# Note to translators: A node test is part of an XPath expression that is
# used to test for particular kinds of nodes. In this case, a node test that
# consists of an NCName followed by a colon and an asterisk or that consists
# of a QName was expected, but was not found.
expectedNodeTest = \u539F\u9810\u671F\u70BA\u7B26\u5408 NCName\:* \u6216 QName \u7684 node test\u3002

# Note to translators: A step pattern is part of an XPath expression.
# The message indicates that syntactically such an expression was expected,
# but the specified character was found in the expression instead.
expectedStepPattern = \u539F\u9810\u671F\u70BA step pattern\uFF0C\u4F46\u537B\u9047\u5230 '/'\u3002

# Note to translators: A relative path pattern is part of an XPath expression.
# The message indicates that syntactically such an expression was expected,
# but was not found.
expectedRelPathPattern = \u539F\u9810\u671F\u70BA\u76F8\u5C0D\u7684\u8DEF\u5F91\u578B\u6A23\u3002

# Note to translators: The substitution text is the name of a data type. The
# message indicates that a value of a particular type could not be converted
# to a value of type boolean.
cantConvertToBoolean = XPath \u8868\u793A\u5F0F ''{0}'' \u7684 XPathResult \u6709\u7121\u6CD5\u8F49\u63DB\u70BA boolean \u7684 {1} \u7684 XPathResultType\u3002

# Note to translators: Do not translate ANY_UNORDERED_NODE_TYPE and
# FIRST_ORDERED_NODE_TYPE.
cantConvertToSinglenode = XPath \u8868\u793A\u5F0F ''{0}'' \u7684 XPathResult \u6709\u7121\u6CD5\u8F49\u63DB\u70BA\u55AE\u4E00\u7BC0\u9EDE\u7684 {1} \u7684 XPathResultType\u3002\u65B9\u6CD5 getSingleNodeValue \u50C5\u9069\u7528\u65BC ANY_UNORDERED_NODE_TYPE \u53CA FIRST_ORDERED_NODE_TYPE \u5169\u7A2E\u985E\u578B\u3002

# Note to translators: Do not translate UNORDERED_NODE_SNAPSHOT_TYPE and
# ORDERED_NODE_SNAPSHOT_TYPE.
cantGetSnapshotLength = \u7121\u6CD5\u5728 XPath \u8868\u793A\u5F0F ''{0}'' \u7684 XPathResult \u4E0A\u547C\u53EB\u65B9\u6CD5 getSnapshotLength\uFF0C\u56E0\u70BA\u5B83\u7684 XPathResultType \u662F {1}\u3002\u6B64\u65B9\u6CD5\u50C5\u9069\u7528\u65BC UNORDERED_NODE_SNAPSHOT_TYPE \u53CA ORDERED_NODE_SNAPSHOT_TYPE \u5169\u7A2E\u985E\u578B\u3002

nonIteratorType = \u7121\u6CD5\u5728 XPath \u8868\u793A\u5F0F ''{0}'' \u7684 XPathResult \u4E0A\u547C\u53EB\u65B9\u6CD5 iterateNext\uFF0C\u56E0\u70BA\u5B83\u7684 XPathResultType \u662F {1}\u3002\u6B64\u65B9\u6CD5\u50C5\u9069\u7528\u65BC UNORDERED_NODE_ITERATOR_TYPE \u53CA ORDERED_NODE_ITERATOR_TYPE \u5169\u7A2E\u985E\u578B\u3002

# Note to translators: This message indicates that the document being operated
# upon changed, so the iterator object that was being used to traverse the
# document has now become invalid.
docMutated = \u81EA\u50B3\u56DE\u7D50\u679C\u4E4B\u5F8C\uFF0C\u6587\u4EF6\u5DF2\u7522\u751F\u8B8A\u5316\u3002\u91CD\u8907\u9805\u76EE\u7121\u6548\u3002

invalidXpathType = XPath \u985E\u578B\u5F15\u6578 {0} \u7121\u6548

emptyXpathResult = XPath \u7D50\u679C\u7269\u4EF6\u7A7A\u767D

incompatibleTypes = XPath \u8868\u793A\u5F0F ''{0}'' \u7684 XPathResult \u6709\u7121\u6CD5\u5F37\u5236\u7F6E\u5165 {2} \u7684\u6307\u5B9A XPathResultType \u4E2D\u7684 {1} \u7684 XPathResultType\u3002

nullResolver = \u7121\u6CD5\u89E3\u6790\u542B\u7A7A\u503C\u5B57\u9996\u89E3\u6790\u5668\u7684\u5B57\u9996\u3002

# Note to translators: The substitution text is the name of a data type. The
# message indicates that a value of a particular type could not be converted
# to a value of type string.
cantConvertToString = XPath \u8868\u793A\u5F0F ''{0}'' \u7684 XPathResult \u6709\u7121\u6CD5\u8F49\u63DB\u70BA\u5B57\u4E32\u7684 {1} \u7684 XPathResultType\u3002

# Note to translators: Do not translate snapshotItem,
# UNORDERED_NODE_SNAPSHOT_TYPE and ORDERED_NODE_SNAPSHOT_TYPE.
nonSnapshotType = \u7121\u6CD5\u5728 XPath \u8868\u793A\u5F0F ''{0}'' \u7684 XPathResult \u4E0A\u547C\u53EB\u65B9\u6CD5 snapshotItem\uFF0C\u56E0\u70BA\u5B83\u7684 XPathResultType \u662F {1}\u3002\u6B64\u65B9\u6CD5\u50C5\u9069\u7528\u65BC UNORDERED_NODE_SNAPSHOT_TYPE \u53CA ORDERED_NODE_SNAPSHOT_TYPE \u5169\u7A2E\u985E\u578B\u3002

# Note to translators: XPathEvaluator is a Java interface name. An XPathEvaluator
# is created with respect to a particular XML document, and in this case the
# expression represented by this object was being evaluated with respect to a
# context node from a different document.
wrongDocument = \u74B0\u5883\u5B9A\u7FA9\u7BC0\u9EDE\u4E0D\u5C6C\u65BC\u548C\u6B64 XPathEvaluator \u9023\u7D50\u7684\u6587\u4EF6\u3002

# Note to translators: The XPath expression cannot be evaluated with respect to
# this type of node.
wrongNodetype = \u74B0\u5883\u5B9A\u7FA9\u7BC0\u9EDE\u985E\u578B\u672A\u53D7\u652F\u63F4\u3002

xpathError = XPath \u767C\u751F\u4E0D\u660E\u932F\u8AA4\u3002

cantConvertXpathresulttypeToNumber = XPath \u8868\u793A\u5F0F ''{0}'' \u7684 XPathResult \u6709\u7121\u6CD5\u8F49\u63DB\u70BA\u6578\u5B57\u7684 {1} \u7684 XPathResultType\u3002

extensionFunctionCannotBeInvoked = \u7576 XMLConstants.FEATURE_SECURE_PROCESSING \u7279\u6027\u8A2D\u70BA true \u6642\uFF0C\u7121\u6CD5\u547C\u53EB\u5EF6\u4F38\u51FD\u6578\uFF1A''{0}''\u3002

resolveVariableReturnsNull = \u8B8A\u6578 {0} \u7684 resolveVariable \u50B3\u56DE\u7A7A\u503C

unsupportedReturnType = \u4E0D\u53D7\u652F\u63F4\u7684\u50B3\u56DE\u985E\u578B\uFF1A{0}

sourceReturnTypeCannotBeNull = \u539F\u59CB\u6A94\u53CA/\u6216\u50B3\u56DE\u985E\u578B\u4E0D\u53EF\u70BA\u7A7A\u503C

argCannotBeNull = {0} \u5F15\u6578\u4E0D\u53EF\u70BA\u7A7A\u503C

objectModelNull = \u7576 objectModel \=\= null \u6642\u7121\u6CD5\u547C\u53EB {0}\#isObjectModelSupported(String objectModel )

objectModelEmpty = \u7576 objectModel \=\= "" \u6642\u7121\u6CD5\u547C\u53EB {0}\#isObjectModelSupported(String objectModel )

featureNameNull = \u5617\u8A66\u8A2D\u5B9A\u4F7F\u7528\u7A7A\u503C\u540D\u7A31\u7684\u7279\u6027\uFF1A{0}\#setFeature( null, {1})

featureUnknown = \u5617\u8A66\u8A2D\u5B9A\u4E0D\u660E\u7279\u6027 "{0}"\uFF1A{1}\#setFeature({0},{2})

gettingNullFeature = \u5617\u8A66\u53D6\u5F97\u4F7F\u7528\u7A7A\u503C\u540D\u7A31\u7684\u7279\u6027\uFF1A{0}\#getFeature(null)

gettingUnknownFeature = \u5617\u8A66\u53D6\u5F97\u4E0D\u660E\u7279\u6027 "{0}"\:{1}\#getFeature({0})

nullXpathFunctionResolver = \u5617\u8A66\u8A2D\u5B9A\u7A7A\u503C XPathFunctionResolver\uFF1A{0}\#setXPathFunctionResolver(null)

nullXpathVariableResolver = \u5617\u8A66\u8A2D\u5B9A\u7A7A\u503C XPathVariableResolver\uFF1A{0}\#setXPathVariableResolver(null)

localeNameNotHandled = format-number \u51FD\u6578\u4E2D\u7684\u8A9E\u8A00\u74B0\u5883\u540D\u7A31\u5C1A\u672A\u8655\u7406\uFF01

propertyNotSupported = XSL \u5167\u5BB9\u672A\u53D7\u652F\u63F4\uFF1A{0}

dontDoAnythingWithNs = \u76EE\u524D\u4E0D\u8981\u5C0D\u5167\u5BB9\uFF1A{1} \u4E2D\u7684\u540D\u7A31\u7A7A\u9593 {0} \u505A\u4EFB\u4F55\u52D5\u4F5C

securityException = \u5617\u8A66\u5B58\u53D6 XSL \u7CFB\u7D71\u5167\u5BB9\uFF1A{0} \u6642\u767C\u751F SecurityException

quoNoLongerDefined = XPath \u4E2D\u5DF2\u4E0D\u518D\u5B9A\u7FA9\u820A\u8A9E\u6CD5\uFF1Aquo(...)\u3002

needDerivedObjectToImplementNodetest = XPath \u9700\u8981\u884D\u751F\u7269\u4EF6\u4F86\u5BE6\u4F5C nodeTest\uFF01

functionTokenNotFound = \u627E\u4E0D\u5230\u51FD\u6578\u8A18\u865F\u3002

couldnotFindFunction = \u627E\u4E0D\u5230\u51FD\u6578\uFF1A{0}

cannotMakeUrlFrom = \u7121\u6CD5\u5F9E\uFF1A{0} \u7522\u751F URL

expandEntitiesNotSupported = -E \u9078\u9805\u4E0D\u53D7 DTM \u5256\u6790\u5668\u652F\u63F4

illegalVariableReference = \u63D0\u4F9B\u7D66\u8B8A\u6578\u7684 VariableReference \u8D85\u51FA\u74B0\u5883\u5B9A\u7FA9\u6216\u6C92\u6709\u5B9A\u7FA9\uFF01\u540D\u7A31 \= {0}

unsupportedEncoding = \u4E0D\u652F\u63F4\u7DE8\u78BC\uFF1A{0}

uiLanguage = zh

helpLanguage = zh

language = zh

formatFailed = \u5728 messageFormat \u547C\u53EB\u671F\u9593\u64F2\u51FA\u7570\u5E38

version = >>>>>>> Xalan \u7248\u672C

version2 = <<<<<<<

yes = yes

line = \u884C\u865F

column = \u6B04\u865F

xsldone = XSLProcessor\uFF1A\u5B8C\u6210

xpathOption = xpath \u9078\u9805\uFF1A

optionin = [-in inputXMLURL]

optionselect = [-select xpath \u8868\u793A\u5F0F]

optionmatch = [-match \u7B26\u5408\u578B\u6A23\uFF08\u7528\u65BC\u6BD4\u5C0D\u8A3A\u65B7\uFF09]

optionanyexpr = \u6216\u53EA\u6709\u4E00\u500B xpath \u8868\u793A\u5F0F\u6703\u57F7\u884C\u8A3A\u65B7\u50BE\u51FA

noparsermsg1 = XSL \u7A0B\u5E8F\u6C92\u6709\u9806\u5229\u5B8C\u6210\u3002

noparsermsg2 = ** \u627E\u4E0D\u5230\u5256\u6790\u5668 **

noparsermsg3 = \u8ACB\u6AA2\u67E5\u985E\u5225\u8DEF\u5F91\u3002

noparsermsg4 = \u5982\u679C\u60A8\u6C92\u6709 IBM \u7684 XML Parser for Java\uFF0C\u53EF\u81EA\u4EE5\u4E0B\u7DB2\u5740\u4E0B\u8F09

noparsermsg5 = IBM \u7684 AlphaWorks\uFF1Ahttp\://www.alphaworks.ibm.com/formula/xml

gtone = >1

zero = 0

one = 1

two = 2

three = 3

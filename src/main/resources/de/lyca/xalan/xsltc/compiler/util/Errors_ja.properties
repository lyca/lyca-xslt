multipleStylesheetErr = \u8907\u6570\u306E\u30B9\u30BF\u30A4\u30EB\u30B7\u30FC\u30C8\u304C\u540C\u3058\u30D5\u30A1\u30A4\u30EB\u5185\u306B\u5B9A\u7FA9\u3055\u308C\u3066\u3044\u307E\u3059\u3002

# Note to translators: The substitution text is the name of a template. The same name was used on two different
# templates in the same stylesheet.
templateRedefErr = \u30C6\u30F3\u30D7\u30EC\u30FC\u30C8 ''{0}'' \u306F\u3053\u306E\u30B9\u30BF\u30A4\u30EB\u30B7\u30FC\u30C8\u5185\u306B\u3059\u3067\u306B\u5B9A\u7FA9\u3055\u308C\u3066\u3044\u307E\u3059\u3002

# Note to translators: The substitution text is the name of a template. A reference to the template name was
# encountered, but the template is undefined.
templateUndefErr = \u30C6\u30F3\u30D7\u30EC\u30FC\u30C8 ''{0}'' \u306F\u3053\u306E\u30B9\u30BF\u30A4\u30EB\u30B7\u30FC\u30C8\u5185\u306B\u5B9A\u7FA9\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002

# Note to translators: The substitution text is the name of a variable that was defined more than once.
variableRedefErr = \u5909\u6570 ''{0}'' \u306F\u540C\u4E00\u30B9\u30B3\u30FC\u30D7\u306B\u8907\u6570\u56DE\u5B9A\u7FA9\u3055\u308C\u3066\u3044\u307E\u3059\u3002

# Note to translators: The substitution text is the name of a variable or parameter. A reference to the variable or
# parameter was found, but it was never defined.
variableUndefErr = \u5909\u6570\u307E\u305F\u306F\u30D1\u30E9\u30E1\u30FC\u30BF\u30FC ''{0}'' \u304C\u672A\u5B9A\u7FA9\u3067\u3059\u3002

# Note to translators: The word "class" here refers to a Java class. Processing the stylesheet required a class to be
# loaded, but it could not be found. The substitution text is the name of the class.
classNotFoundErr = \u30AF\u30E9\u30B9 ''{0}'' \u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093\u3002

# Note to translators: The word "method" here refers to a Java method. Processing the stylesheet required a reference
# to the method named by the substitution text, but it could not be found. "public" is the Java keyword.
methodNotFoundErr = \u5916\u90E8\u30E1\u30BD\u30C3\u30C9 ''{0}'' \u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093 (public \u3067\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093)

# Note to translators: The word "method" here refers to a Java method. Processing the stylesheet required a reference
# to the method named by the substitution text, but no method with the required types of arguments or return type could
# be found.
argumentConversionErr = \u30E1\u30BD\u30C3\u30C9 ''{0}'' \u3078\u306E\u547C\u3073\u51FA\u3057\u306E\u5F15\u6570/\u623B\u308A\u5024\u306E\u578B\u3092\u5909\u63DB\u3067\u304D\u307E\u305B\u3093\u3002

# Note to translators: The file or URI named in the substitution text is missing.
fileNotFoundErr = \u30D5\u30A1\u30A4\u30EB\u307E\u305F\u306F URI ''{0}'' \u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093\u3002

# Note to translators: This message is displayed when the URI mentioned in the substitution text is not well-formed
# syntactically.
invalidUriErr = URI ''{0}'' \u304C\u7121\u52B9\u3067\u3059\u3002

# Note to translators: The file or URI named in the substitution text exists but could not be opened.
fileAccessErr = \u30D5\u30A1\u30A4\u30EB\u307E\u305F\u306F URI ''{0}'' \u3092\u30AA\u30FC\u30D7\u30F3\u3067\u304D\u307E\u305B\u3093\u3002

# Note to translators: <xsl:stylesheet> and <xsl:transform> are keywords that should not be translated.
missingRootErr = <xsl\:stylesheet> \u307E\u305F\u306F <xsl\:transform> \u8981\u7D20\u304C\u5FC5\u8981\u3067\u3057\u305F\u3002

# Note to translators: The stylesheet contained a reference to a namespace prefix that was undefined. The value of the
# substitution text is the name of the prefix.
namespaceUndefErr = \u540D\u524D\u7A7A\u9593\u63A5\u982D\u90E8 ''{0}'' \u304C\u5BA3\u8A00\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002

# Note to translators: The Java function named in the stylesheet could not be found.
functionResolveErr = \u95A2\u6570 ''{0}'' \u3078\u306E\u547C\u3073\u51FA\u3057\u3092\u89E3\u6C7A\u3067\u304D\u307E\u305B\u3093\u3002

# Note to translators: The substitution text is the name of a function. A literal string here means a constant string
# value.
needLiteralErr = ''{0}'' \u3078\u306E\u5F15\u6570\u306F\u30EA\u30C6\u30E9\u30EB\u30FB\u30B9\u30C8\u30EA\u30F3\u30B0\u3067\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093\u3002

# Note to translators: This message indicates there was a syntactic error in the form of an XPath expression. The
# substitution text is the expression.
xpathParserErr = XPath \u5F0F ''{0}'' \u3092\u69CB\u6587\u89E3\u6790\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F\u3002

# Note to translators: An element in the stylesheet requires a particular attribute named by the substitution text, but
# that attribute was not specified in the stylesheet.
requiredAttrErr = \u5FC5\u8981\u5C5E\u6027 ''{0}'' \u304C\u3042\u308A\u307E\u305B\u3093\u3002

# Note to translators: This message indicates that a character not permitted in an XPath expression was encountered.
# The substitution text is the offending character.
illegalCharErr = XPath \u5F0F\u5185\u306B\u6B63\u3057\u304F\u306A\u3044\u6587\u5B57 ''{0}'' \u304C\u3042\u308A\u307E\u3059\u3002

# Note to translators: A processing instruction is a mark-up item in an XML document that request some behaviour of an
# XML processor. The form of the name of was invalid in this case, and the substitution text is the name.
illegalPiErr = \u51E6\u7406\u547D\u4EE4\u306E\u540D\u524D ''{0}'' \u304C\u6B63\u3057\u304F\u3042\u308A\u307E\u305B\u3093\u3002

# Note to translators: This message is reported if the stylesheet being processed attempted to construct an XML document
# with an attribute in a place other than on an element. The substitution text specifies the name of the attribute.
strayAttributeErr = \u5C5E\u6027 ''{0}'' \u304C\u8981\u7D20\u306E\u5916\u5074\u3067\u3059\u3002

# Note to translators: An attribute that wasn't recognized was specified on an element in the stylesheet. The attribute
# is named by the substitution text.
illegalAttributeErr = \u5C5E\u6027 ''{0}'' \u304C\u6B63\u3057\u304F\u3042\u308A\u307E\u305B\u3093\u3002

# Note to translators: "import" and "include" are keywords that should not be translated. This messages indicates that
# the stylesheet named in the substitution text imported or included itself either directly or indirectly.
circularIncludeErr = import/include \u304C\u76F8\u4E92\u4F9D\u5B58\u3057\u3066\u3044\u307E\u3059\u3002\u30B9\u30BF\u30A4\u30EB\u30B7\u30FC\u30C8 ''{0}'' \u306F\u3059\u3067\u306B\u30ED\u30FC\u30C9\u3055\u308C\u3066\u3044\u307E\u3059\u3002

# Note to translators: A result-tree fragment is a portion of a resulting XML document represented as a tree.
# "<xsl:sort>" is a keyword and should not be translated.
resultTreeSortErr = \u7D50\u679C\u30C4\u30EA\u30FC\u30FB\u30D5\u30E9\u30B0\u30E1\u30F3\u30C8\u3092\u30BD\u30FC\u30C8\u3067\u304D\u307E\u305B\u3093 (<xsl\:sort> \u8981\u7D20\u306F\u7121\u8996\u3055\u308C\u307E\u3059)\u3002\u3053\u306E\u30CE\u30FC\u30C9\u306F\u7D50\u679C\u30C4\u30EA\u30FC\u306E\u4F5C\u6210\u6642\u306B\u30BD\u30FC\u30C8\u3057\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093\u3002

# Note to translators: A name can be given to a particular style to be used to format decimal values. The substitution
# text gives the name of such a style for which more than one declaration was encountered.
symbolsRedefErr = 10 \u9032\u6570\u30D5\u30A9\u30FC\u30DE\u30C3\u30C8 ''{0}'' \u306F\u3059\u3067\u306B\u5B9A\u7FA9\u3055\u308C\u3066\u3044\u307E\u3059\u3002

# Note to translators: The stylesheet version named in the substitution text is not supported.
xslVersionErr = XSL \u30D0\u30FC\u30B8\u30E7\u30F3 ''{0}'' \u306F XSLTC \u306B\u3088\u3063\u3066\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002

# Note to translators: The definitions of one or more variables or parameters depend on one another.
circularVariableErr = ''{0}'' \u306E\u5909\u6570/\u30D1\u30E9\u30E1\u30FC\u30BF\u30FC\u306E\u53C2\u7167\u304C\u76F8\u4E92\u4F9D\u5B58\u3057\u3066\u3044\u307E\u3059\u3002

# Note to translators: The operator in an expresion with two operands was not recognized.
illegalBinaryOpErr = 2 \u9032\u5F0F\u306E\u6F14\u7B97\u5B50\u304C\u4E0D\u660E\u3067\u3059\u3002

# Note to translators: This message is produced if a reference to a function has too many or too few arguments.
illegalArgErr = \u95A2\u6570\u547C\u3073\u51FA\u3057\u306E\u5F15\u6570 (1 \u3064\u4EE5\u4E0A) \u304C\u6B63\u3057\u304F\u3042\u308A\u307E\u305B\u3093\u3002

# Note to translators: "document()" is the name of function and must not be translated. A node-set is a set of the nodes
# in the tree representation of an XML document.
documentArgErr = document() \u95A2\u6570\u3078\u306E 2 \u3064\u76EE\u306E\u5F15\u6570\u306F\u30CE\u30FC\u30C9\u30FB\u30BB\u30C3\u30C8\u3067\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093\u3002

# Note to translators: "<xsl:when>" and "<xsl:choose>" are keywords and should not be translated. This message describes
# a syntax error in the stylesheet.
missingWhenErr = \u5C11\u306A\u304F\u3068\u3082 1 \u3064\u306E <xsl\:when> \u8981\u7D20\u304C <xsl\:choose> \u5185\u306B\u5FC5\u8981\u3067\u3059\u3002

# Note to translators: "<xsl:otherwise>" and "<xsl:choose>" are keywords and should not be translated. This message
# describes a syntax error in the stylesheet.
multipleOtherwiseErr = <xsl\:choose> \u3067\u8A31\u53EF\u3055\u308C\u3066\u3044\u308B <xsl\:otherwise> \u8981\u7D20\u306F 1 \u3064\u3060\u3051\u3067\u3059\u3002

# Note to translators: "<xsl:otherwise>" and "<xsl:choose>" are keywords and should not be translated. This message
# describes a syntax error in the stylesheet.
strayOtherwiseErr = <xsl\:otherwise> \u3092\u4F7F\u7528\u3067\u304D\u308B\u306E\u306F <xsl\:choose> \u5185\u3060\u3051\u3067\u3059\u3002

# Note to translators: "<xsl:when>" and "<xsl:choose>" are keywords and should not be translated. This message describes
# a syntax error in the stylesheet.
strayWhenErr = <xsl\:when> \u3092\u4F7F\u7528\u3067\u304D\u308B\u306E\u306F <xsl\:choose> \u5185\u3060\u3051\u3067\u3059\u3002

# Note to translators: "<xsl:when>", "<xsl:otherwise>" and "<xsl:choose>" are keywords and should not be translated.
# This message describes a syntax error in the stylesheet.
whenElementErr = <xsl\:choose> \u3067\u8A31\u53EF\u3055\u308C\u3066\u3044\u308B\u306E\u306F <xsl\:when> \u304A\u3088\u3073 <xsl\:otherwise> \u8981\u7D20\u3060\u3051\u3067\u3059\u3002

# Note to translators: "<xsl:attribute-set>" and "name" are keywords that should not be translated.
unnamedAttribsetErr = <xsl\:attribute-set> \u306B 'name' \u5C5E\u6027\u304C\u3042\u308A\u307E\u305B\u3093\u3002

# Note to translators: An element in the stylesheet contained an element of a type that it was not permitted to contain.
illegalChildErr = \u5B50\u8981\u7D20\u304C\u6B63\u3057\u304F\u3042\u308A\u307E\u305B\u3093\u3002

# Note to translators: The stylesheet tried to create an element with a name that was not a valid XML name. The
# substitution text contains the name.
illegalElemNameErr = \u8981\u7D20\u306B ''{0}'' \u3068\u3044\u3046\u540D\u524D\u3092\u4ED8\u3051\u308B\u3053\u3068\u306F\u3067\u304D\u307E\u305B\u3093\u3002

# Note to translators: The stylesheet tried to create an attribute with a name that was not a valid XML name. The
# substitution text contains the name.
illegalAttrNameErr = \u5C5E\u6027\u306B ''{0}'' \u3068\u3044\u3046\u540D\u524D\u3092\u4ED8\u3051\u308B\u3053\u3068\u306F\u3067\u304D\u307E\u305B\u3093\u3002

# Note to translators: The children of the outermost element of a stylesheet are referred to as top-level elements. No
# text should occur within that outermost element unless it is within a top-level element. This message indicates that
# that constraint was violated. "<xsl:stylesheet>" is a keyword that should not be translated.
illegalTextNodeErr = \u30C6\u30AD\u30B9\u30C8\u30FB\u30C7\u30FC\u30BF\u304C\u6700\u4E0A\u4F4D\u306E <xsl\:stylesheet> \u8981\u7D20\u306E\u5916\u5074\u306B\u3042\u308A\u307E\u3059\u3002

# Note to translators: JAXP is an acronym for the Java API for XML Processing. This message indicates that the XML
# parser provided to XSLTC to process the XML input document had a configuration problem.
saxParserConfigErr = JAXP \u30D1\u30FC\u30B5\u30FC\u306F\u6B63\u3057\u304F\u69CB\u6210\u3055\u308C\u3066\u3044\u307E\u305B\u3093

# Note to translators: The substitution text names the internal error encountered.
internalErr = \u30EA\u30AB\u30D0\u30EA\u30FC\u4E0D\u80FD XSLTC \u5185\u90E8\u30A8\u30E9\u30FC\: ''{0}''

# Note to translators: The stylesheet contained an element that was not recognized as part of the XSL syntax. The
# substitution text gives the element name.
unsupportedXslErr = XSL \u8981\u7D20 ''{0}'' \u306F\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002

# Note to translators: The stylesheet referred to an extension to the XSL syntax and indicated that it was defined by
# XSLTC, but XSTLC does not recognized the particular extension named. The substitution text gives the extension name.
unsupportedExtErr = XSLTC \u62E1\u5F35\u6A5F\u80FD ''{0}'' \u306F\u8A8D\u8B58\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002

# Note to translators: The XML document given to XSLTC as a stylesheet was not, in fact, a stylesheet. XSLTC is able to
# detect that in this case because the outermost element in the stylesheet has to be declared with respect to the XSL
# namespace URI, but no declaration for that namespace was seen.
missingXsltUriErr = \u5165\u529B\u6587\u66F8\u306F\u30B9\u30BF\u30A4\u30EB\u30B7\u30FC\u30C8\u3067\u306F\u3042\u308A\u307E\u305B\u3093 (XSL \u540D\u524D\u7A7A\u9593\u306F\u30EB\u30FC\u30C8\u8981\u7D20\u5185\u3067\u5BA3\u8A00\u3055\u308C\u3066\u3044\u307E\u305B\u3093)

# Note to translators: XSLTC could not find the stylesheet document with the name specified by the substitution text.
missingXsltTargetErr = \u30B9\u30BF\u30A4\u30EB\u30B7\u30FC\u30C8\u30FB\u30BF\u30FC\u30B2\u30C3\u30C8 ''{0}'' \u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093\u3067\u3057\u305F\u3002

# Note to translators: This message represents an internal error in condition in XSLTC. The substitution text is the
# class name in XSLTC that is missing some functionality.
notImplementedErr = ''{0}'' \u304C\u5B9F\u88C5\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002

# Note to translators: The XML document given to XSLTC as a stylesheet was not, in fact, a stylesheet.
notStylesheetErr = \u5165\u529B\u6587\u66F8\u306B\u306F XSL \u30B9\u30BF\u30A4\u30EB\u30B7\u30FC\u30C8\u304C\u5165\u3063\u3066\u3044\u307E\u305B\u3093\u3002

# Note to translators: The element named in the substitution text was encountered in the stylesheet but is not
# recognized.
elementParseErr = \u8981\u7D20 ''{0}'' \u3092\u69CB\u6587\u89E3\u6790\u3067\u304D\u307E\u305B\u3093\u3067\u3057\u305F\u3002

# Note to translators: "use", "<key>", "node", "node-set", "string" and "number" are keywords in this context and should
# not be translated. This message indicates that the value of the "use" attribute was not one of the permitted values.
keyUseAttrErr = <key> \u306E use \u5C5E\u6027\u306F node\u3001node-set\u3001string\u3001\u307E\u305F\u306F number \u3067\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093\u3002

# Note to translators: An XML document can specify the version of the XML specification to which it adheres. This
# message indicates that the version specified for the output document was not valid.
outputVersionErr = \u51FA\u529B XML \u6587\u66F8\u306E\u30D0\u30FC\u30B8\u30E7\u30F3\u306F 1.0 \u306B\u306A\u3063\u3066\u3044\u308B\u306F\u305A\u3067\u3059

# Note to translators: The operator in a comparison operation was not recognized.
illegalRelatOpErr = \u95A2\u4FC2\u5F0F\u306E\u6F14\u7B97\u5B50\u304C\u4E0D\u660E\u3067\u3059

# Note to translators: An attribute set defines as a set of XML attributes that can be added to an element in the output
# XML document as a group. This message is reported if the name specified was not used to declare an attribute set. The
# substitution text is the name that is in error.
attribsetUndefErr = \u5B58\u5728\u3057\u306A\u3044\u5C5E\u6027\u30BB\u30C3\u30C8 ''{0}'' \u3092\u4F7F\u7528\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u307E\u3059\u3002

# Note to translators: The term "attribute value template" is a term defined by XSLT which describes the value of an
# attribute that is determined by an XPath expression. The message indicates that the expression was syntactically
# incorrect; the substitution text contains the expression that was in error.
attrValTemplateErr = \u5C5E\u6027\u5024\u30C6\u30F3\u30D7\u30EC\u30FC\u30C8 ''{0}'' \u3092\u69CB\u6587\u89E3\u6790\u3067\u304D\u307E\u305B\u3093\u3002

# Note to translators: ???
unknownSigTypeErr = \u30AF\u30E9\u30B9 ''{0}'' \u306E\u30B7\u30B0\u30CB\u30C1\u30E3\u30FC\u5185\u306E\u30C7\u30FC\u30BF\u578B\u304C\u4E0D\u660E\u3067\u3059\u3002

# Note to translators: The substitution text refers to data types. The message is displayed if a value in a particular
# context needs to be converted to type {1}, but that's not possible for a value of type {0}.
dataConversionErr = \u30C7\u30FC\u30BF\u578B ''{0}'' \u3092 ''{1}'' \u306B\u5909\u63DB\u3067\u304D\u307E\u305B\u3093\u3002

# Note to translators: "Templates" is a Java class name that should not be translated.
noTransletClassErr = \u3053\u306E\u30C6\u30F3\u30D7\u30EC\u30FC\u30C8\u306B\u306F\u6709\u52B9\u306A translet \u30AF\u30E9\u30B9\u5B9A\u7FA9\u304C\u5165\u3063\u3066\u3044\u307E\u305B\u3093\u3002

# Note to translators: "Templates" is a Java class name that should not be translated.
noMainTransletErr = \u3053\u306E Templates \u306B\u306F\u540D\u524D\u304C ''{0}'' \u306E\u30AF\u30E9\u30B9\u306F\u542B\u307E\u308C\u3066\u3044\u307E\u305B\u3093\u3002

# Note to translators: The substitution text is the name of a class.
transletClassErr = translet \u30AF\u30E9\u30B9 ''{0}'' \u3092\u30ED\u30FC\u30C9\u3067\u304D\u307E\u305B\u3093\u3067\u3057\u305F\u3002

transletObjectErr = translet \u30AF\u30E9\u30B9\u304C\u30ED\u30FC\u30C9\u3055\u308C\u307E\u3057\u305F\u304C\u3001translet \u30A4\u30F3\u30B9\u30BF\u30F3\u30B9\u3092\u4F5C\u6210\u3067\u304D\u307E\u305B\u3093\u3002

# Note to translators: "ErrorListener" is a Java interface name that should not be translated. The message indicates
# that the user tried to set an ErrorListener object on object of the class named in the substitution text with "null"
# Java value.
errorListenerNullErr = ''{0}'' \u306E ErrorListener \u3092\u30CC\u30EB\u306B\u8A2D\u5B9A\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u307E\u3059\u3002

# Note to translators: StreamSource, SAXSource and DOMSource are Java interface names that should not be translated.
jaxpUnknownSourceErr = XSLTC \u304C\u30B5\u30DD\u30FC\u30C8\u3057\u3066\u3044\u308B\u306E\u306F StreamSource\u3001SAXSource\u3001\u304A\u3088\u3073 DOMSource \u3060\u3051\u3067\u3059

# Note to translators: "Source" is a Java class name that should not be translated. The substitution text is the name of
# Java method.
jaxpNoSourceErr = ''{0}'' \u306B\u6E21\u3055\u308C\u305F Source \u30AA\u30D6\u30B8\u30A7\u30AF\u30C8\u306B\u306F\u5185\u5BB9\u304C\u3042\u308A\u307E\u305B\u3093\u3002

# Note to translators: The message indicates that XSLTC failed to compile the stylesheet into a translet (class file).
jaxpCompileErr = \u30B9\u30BF\u30A4\u30EB\u30B7\u30FC\u30C8\u3092\u30B3\u30F3\u30D1\u30A4\u30EB\u3067\u304D\u307E\u305B\u3093\u3067\u3057\u305F

# Note to translators: "TransformerFactory" is a class name. In this context, an attribute is a property or setting of
# the TransformerFactory object. The substitution text is the name of the unrecognised attribute. The method used to
# retrieve the attribute is "getAttribute", so it's not clear whether it would be best to translate the term
# "attribute".
jaxpInvalidAttrErr = TransformerFactory \u306F\u5C5E\u6027 ''{0}'' \u3092\u8A8D\u8B58\u3057\u307E\u305B\u3093\u3002

# Note to translators: "setResult()" and "startDocument()" are Java method names that should not be translated.
jaxpSetResultErr = setResult() \u306F startDocument() \u306E\u524D\u306B\u547C\u3073\u51FA\u3055\u308C\u3066\u3044\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093\u3002

# Note to translators: "Transformer" is a Java interface name that should not be translated. A Transformer object should
# contained a reference to a translet object in order to be used for transformations; this message is produced if that
# requirement is not met.
jaxpNoTransletErr = \u5909\u63DB\u30D7\u30ED\u30B0\u30E9\u30E0\u306B\u306F\u30AB\u30D7\u30BB\u30EB\u5316\u3055\u308C\u305F translet \u30AA\u30D6\u30B8\u30A7\u30AF\u30C8\u304C\u3042\u308A\u307E\u305B\u3093\u3002

# Note to translators: The XML document that results from a transformation needs to be sent to an output handler object;
# this message is produced if that requirement is not met.
jaxpNoHandlerErr = \u5909\u63DB\u7D50\u679C\u306E\u51FA\u529B\u30CF\u30F3\u30C9\u30E9\u30FC\u304C\u5B9A\u7FA9\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002

# Note to translators: "Result" is a Java interface name in this context. The substitution text is a method name.
jaxpNoResultErr = ''{0}'' \u306B\u6E21\u3055\u308C\u305F Result \u30AA\u30D6\u30B8\u30A7\u30AF\u30C8\u304C\u7121\u52B9\u3067\u3059\u3002

# Note to translators: "Transformer" is a Java interface name. The user's program attempted to access an unrecognized
# property with the name specified in the substitution text. The method used to retrieve the property is
# "getOutputProperty", so it's not clear whether it would be best to translate the term "property".
jaxpUnknownPropErr = \u7121\u52B9\u306A Transformer \u30D7\u30ED\u30D1\u30C6\u30A3\u30FC ''{0}'' \u306B\u30A2\u30AF\u30BB\u30B9\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u307E\u3059\u3002

# Note to translators: SAX2DOM is the name of a Java class that should not be translated. This is an adapter in the
# sense that it takes a DOM object and converts it to something that uses the SAX API.
sax2domAdapterErr = SAX2DOM \u30A2\u30C0\u30D7\u30BF\u30FC ''{0}'' \u3092\u4F5C\u6210\u3067\u304D\u307E\u305B\u3093\u3067\u3057\u305F\u3002

# Note to translators: "XSLTCSource.build()" is a Java method name. "systemId" is an XML term that is short for "system
# identification".
xsltcSourceErr = XSLTCSource.build() \u304C systemId \u3092\u8A2D\u5B9A\u3057\u306A\u3044\u3067\u547C\u3073\u51FA\u3055\u308C\u3066\u3044\u307E\u3059\u3002

erResultNull = \u7D50\u679C\u306F\u30CC\u30EB\u306B\u306F\u306A\u3089\u306A\u3044\u306F\u305A\u3067\u3059\u3002

# Note to translators: This message indicates that the value argument of setParameter must be a valid Java Object.
jaxpInvalidSetParamValue = param {0} \u306E\u5024\u306F\u6709\u52B9\u306A Java \u30AA\u30D6\u30B8\u30A7\u30AF\u30C8\u3067\u3042\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059

compileStdinErr = -i \u30AA\u30D7\u30B7\u30E7\u30F3\u306F -o \u30AA\u30D7\u30B7\u30E7\u30F3\u3068\u4E00\u7DD2\u306B\u4F7F\u7528\u3057\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093\u3002

# Note to translators: This message contains usage information for a means of invoking XSLTC from the command-line. The
# message is formatted for presentation in English. The strings <output>, <directory>, etc. indicate user-specified
# argument values, and can be translated - the argument <package> refers to a Java package, so it should be handled in
# the same way the term is handled for JDK documentation.
compileUsageStr = \u5F62\u5F0F\n   java de.lyca.xalan.xsltc.cmdline.Compile [-o <output>]\n      [-d <directory>] [-j <jarfile>] [-p <package>]\n      [-n] [-x] [-u] [-v] [-h] { <stylesheet> | -i }\n\n\u30AA\u30D7\u30B7\u30E7\u30F3\n   -o <output>    \u540D\u524D <output> \u3092\u751F\u6210\u3055\u308C\u308B translet \u306B\n                  \u5272\u308A\u5F53\u3066\u307E\u3059\u3002\u30C7\u30D5\u30A9\u30EB\u30C8\u3067\u306F\u3001translet \u540D\u306F <stylesheet>\n                  \u540D\u304B\u3089\u6D3E\u751F\u3057\u307E\u3059\u3002\u3053\u306E\u30AA\u30D7\u30B7\u30E7\u30F3\u306F\u8907\u6570\u306E\u30B9\u30BF\u30A4\u30EB\u30B7\u30FC\u30C8\u3092\n                \u30B3\u30F3\u30D1\u30A4\u30EB\u3059\u308B\u5834\u5408\u306F\u7121\u8996\u3055\u308C\u307E\u3059\u3002\n-d <directory> translet \u306E\u5B9B\u5148\u30C7\u30A3\u30EC\u30AF\u30C8\u30EA\u30FC\u3092\u6307\u5B9A\u3057\u307E\u3059\n -j <jarfile>   translet \u30AF\u30E9\u30B9\u3092 <jarfile> \u3068\u3057\u3066\u6307\u5B9A\u3055\u308C\u305F\n                \u540D\u524D\u306E JAR \u30D5\u30A1\u30A4\u30EB\u306B\u30D1\u30C3\u30B1\u30FC\u30B8\u3057\u307E\u3059\n -p <package>   \u751F\u6210\u5F8C\u306E\u3059\u3079\u3066\u306E translet \u30AF\u30E9\u30B9\u306B\u30D1\u30C3\u30B1\u30FC\u30B8\u540D\n                \u63A5\u982D\u90E8\u3092\u6307\u5B9A\u3057\u307E\u3059\u3002\n-n             \u30C6\u30F3\u30D7\u30EC\u30FC\u30C8\u306E\u30A4\u30F3\u30E9\u30A4\u30F3\u5316\u3092\u4F7F\u7528\u53EF\u80FD\u306B\u3057\u307E\u3059 (\u30C6\u30F3\u30D7\u30EC\u30FC\u30C8\u306E\u30A4\u30F3\n                \u30E9\u30A4\u30F3\u5316\u3067\u5E73\u5747\u3068\u3057\u3066\u826F\u597D\u306A\u30D1\u30D5\u30A9\u30FC\u30DE\u30F3\u30B9\u3092\u5F97\u308B\u3053\u3068\u304C\u3067\u304D\u307E\u3059)\n-x             \u8FFD\u52A0\u306E\u30C7\u30D0\u30C3\u30B0\u30FB\u30E1\u30C3\u30BB\u30FC\u30B8\u51FA\u529B\u3092\u30AA\u30F3\u306B\u3057\u307E\u3059\n   -u             <stylesheet> \u5F15\u6570\u3092 URL \u3068\u3057\u3066\u89E3\u91C8\u3057\u307E\u3059\n   -i             \u30B9\u30BF\u30A4\u30EB\u30B7\u30FC\u30C8\u3092\u6A19\u6E96\u5165\u529B\u304B\u3089\u8AAD\u307F\u53D6\u308B\u3088\u3046\u30B3\u30F3\u30D1\u30A4\u30E9\u30FC\u306B\u5F37\u5236\u3057\u307E\u3059\n   -v             \u30B3\u30F3\u30D1\u30A4\u30E9\u30FC\u306E\u30D0\u30FC\u30B8\u30E7\u30F3\u3092\u5370\u5237\u3057\u307E\u3059\n   -h             \u3053\u306E\u4F7F\u7528\u6CD5\u3092\u5370\u5237\u3057\u307E\u3059\n

# Note to translators: This message contains usage information for a means of invoking XSLTC from the command-line. The
# message is formatted for presentation in English. The strings <jarfile>, <document>, etc. indicate user-specified
# argument values, and can be translated - the argument <class> refers to a Java class, so it should be handled in the
# same way the term is handled for JDK documentation.
transformUsageStr = \u5F62\u5F0F\n   java de.lyca.xalan.xsltc.cmdline.Transform [-j <jarfile>]\n      [-x] [-n <iterations>] {-u <document_url> | <document>}\n      <class> [<param1>\=<value1> ...]\n\n   translet <class> \u3092\u4F7F\u7528\u3057\u3066 <document> \u3067\u6307\u5B9A\u3055\u308C\u305F\n   XML \u6587\u66F8\u3092\u5909\u63DB\u3057\u307E\u3059\u3002translet <class> \u306F\u30E6\u30FC\u30B6\u30FC\u306E CLASSPATH\n \u307E\u305F\u306F\u30AA\u30D7\u30B7\u30E7\u30F3\u3067\u6307\u5B9A\u3055\u308C\u308B <jarfile> \u306B\u5165\u3063\u3066\u3044\u307E\u3059\u3002\n\u30AA\u30D7\u30B7\u30E7\u30F3\n   -j <jarfile>    \u30ED\u30FC\u30C9\u3059\u308B translet \u304C\u5165\u3063\u3066\u3044\u308B JAR \u30D5\u30A1\u30A4\u30EB\u3092\u6307\u5B9A\u3057\u307E\u3059\n   -x              \u8FFD\u52A0\u306E\u30C7\u30D0\u30C3\u30B0\u30FB\u30E1\u30C3\u30BB\u30FC\u30B8\u51FA\u529B\u3092\u30AA\u30F3\u306B\u3057\u307E\u3059\n   -n <iterations> \u306F\u5909\u63DB\u3092 <iterations> \u56DE\u5B9F\u884C\u3057\u3066\n                   \u30D7\u30ED\u30D5\u30A1\u30A4\u30EB\u60C5\u5831\u3092\u8868\u793A\u3057\u307E\u3059\n   -u <document_url> \u306F XML \u5165\u529B\u6587\u66F8\u3092 URL \u3068\u3057\u3066\u6307\u5B9A\u3057\u307E\u3059\n

# Note to translators: "<xsl:sort>", "<xsl:for-each>" and "<xsl:apply-templates>" are keywords that should not be
# translated. The message indicates that an xsl:sort element must be a child of one of the other kinds of elements
# mentioned.
straySortErr = <xsl\:sort> \u3092\u4F7F\u7528\u3067\u304D\u308B\u306E\u306F <xsl\:for-each> \u307E\u305F\u306F <xsl\:apply-templates> \u5185\u3060\u3051\u3067\u3059\u3002

# Note to translators: The message indicates that the encoding requested for the output document was on that requires
# support that is not available from the Java Virtual Machine being used to execute the program.
unsupportedEncoding = \u51FA\u529B\u30A8\u30F3\u30B3\u30FC\u30C9 ''{0}'' \u306F\u3053\u306E JVM \u3067\u306F\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002

# Note to translators: The message indicates that the XPath expression named in the substitution text was not well
# formed syntactically.
syntaxErr = ''{0}'' \u306B\u69CB\u6587\u30A8\u30E9\u30FC\u304C\u3042\u308A\u307E\u3059\u3002

# Note to translators: The substitution text is the name of a Java class. The term "constructor" here is the Java term.
# The message is displayed if XSLTC could not find a constructor for the specified class.
constructorNotFound = \u5916\u90E8\u30B3\u30F3\u30B9\u30C8\u30E9\u30AF\u30BF\u30FC ''{0}'' \u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093\u3002

# Note to translators: "static" is the Java keyword. The substitution text is the name of a function. The first argument
# of that function is not of the required type.
noJavaFunctThisRef = \u975E static Java \u95A2\u6570 ''{0}'' \u3078\u306E\u5148\u982D\u306E\u5F15\u6570\u306F\u6709\u52B9\u306A\u30AA\u30D6\u30B8\u30A7\u30AF\u30C8\u53C2\u7167\u3067\u3042\u308A\u307E\u305B\u3093\u3002

# Note to translators: An XPath expression was not of the type required in a particular context. The substitution text
# is the expression that was in error.
typeCheckErr = \u5F0F ''{0}'' \u306E\u578B\u3092\u691C\u67FB\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F\u3002

# Note to translators: An XPath expression was not of the type required in a particular context. However, the location
# of the problematic expression is unknown.
typeCheckUnkLocErr = \u4E0D\u660E\u306A\u30ED\u30B1\u30FC\u30B7\u30E7\u30F3\u3067\u5F0F\u306E\u578B\u3092\u691C\u67FB\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F\u3002

# Note to translators: The substitution text is the name of a commandline option that was not recognized.
illegalCmdlineOptionErr = \u30B3\u30DE\u30F3\u30C9\u884C\u30AA\u30D7\u30B7\u30E7\u30F3 ''{0}'' \u304C\u7121\u52B9\u3067\u3059\u3002

# Note to translators: The substitution text is the name of a commandline option.
cmdlineOptMissingArgErr = \u30B3\u30DE\u30F3\u30C9\u884C\u30AA\u30D7\u30B7\u30E7\u30F3 ''{0}'' \u306B\u5FC5\u8981\u306A\u5F15\u6570\u304C\u3042\u308A\u307E\u305B\u3093\u3002

# Note to translators: This message is used to indicate the severity of another message. The substitution text contains
# two error messages. The spacing before the second substitution text indents it the same amount as the first in
# English.
warningPlusWrappedMsg = \u8B66\u544A\:  ''{0}''\n       \:{1}

# Note to translators: This message is used to indicate the severity of another message. The substitution text is an
# error message.
warningMsg = \u8B66\u544A\:  ''{0}''

# Note to translators: This message is used to indicate the severity of another message. The substitution text contains
# two error messages. The spacing before the second substitution text indents it the same amount as the first in
# English.
fatalErrPlusWrappedMsg = \u81F4\u547D\u7684\u30A8\u30E9\u30FC\:  ''{0}''\n           \:{1}

# Note to translators: This message is used to indicate the severity of another message. The substitution text is an
# error message.
fatalErrMsg = \u81F4\u547D\u7684\u30A8\u30E9\u30FC\:  ''{0}''

# Note to translators: This message is used to indicate the severity of another message. The substitution text contains
# two error messages. The spacing before the second substitution text indents it the same amount as the first in
# English.
errorPlusWrappedMsg = \u30A8\u30E9\u30FC\:  ''{0}''\n     \:{1}

# Note to translators: This message is used to indicate the severity of another message. The substitution text is an
# error message.
errorMsg = \u30A8\u30E9\u30FC\:  ''{0}''

# Note to translators: The substitution text is the name of a class.
transformWithTransletStr = translet ''{0}'' \u3092\u4F7F\u7528\u3059\u308B\u5909\u63DB

# Note to translators: The first substitution is the name of a class, while the second substitution is the name of a
# jar file.
transformWithJarStr = JAR \u30D5\u30A1\u30A4\u30EB ''{1}'' \u306E translet ''{0}'' \u3092\u4F7F\u7528\u3059\u308B\u5909\u63DB

# Note to translators: "TransformerFactory" is the name of a Java interface and must not be translated. The substitution
# text is the name of the class that could not be instantiated.
couldNotCreateTransFact = TransformerFactory \u30AF\u30E9\u30B9 ''{0}'' \u306E\u30A4\u30F3\u30B9\u30BF\u30F3\u30B9\u3092\u4F5C\u6210\u3067\u304D\u307E\u305B\u3093\u3067\u3057\u305F\u3002

# Note to translators: This message is produced when the user specified a name for the translet class that contains
# characters that are not permitted in a Java class name. The substitution text "{0}" specifies the name the user
# requested, while "{1}" specifies the name the processor used instead.
transletNameJavaConflict = \u540D\u524D ''{0}'' \u306F translet \u30AF\u30E9\u30B9\u306E\u540D\u524D\u3068\u3057\u3066\u4F7F\u7528\u3067\u304D\u307E\u305B\u3093\u3002Java \u30AF\u30E9\u30B9\u306E\u540D\u524D\u306B\u8A31\u53EF\u3055\u308C\u3066\u3044\u306A\u3044\u6587\u5B57\u304C\u542B\u307E\u308C\u3066\u3044\u308B\u305F\u3081\u3067\u3059\u3002\u4EE3\u308F\u308A\u306B\u3001\u540D\u524D ''{1}'' \u304C\u4F7F\u7528\u3055\u308C\u307E\u3057\u305F\u3002

# Note to translators: The following message is used as a header. All the error messages are collected together and
# displayed beneath this message.
compilerErrorKey = \u30B3\u30F3\u30D1\u30A4\u30E9\u30FC\u30FB\u30A8\u30E9\u30FC\:

# Note to translators: The following message is used as a header. All the warning messages are collected together and
# displayed beneath this message.
compilerWarningKey = \u30B3\u30F3\u30D1\u30A4\u30E9\u30FC\u8B66\u544A\:

# Note to translators: The following message is used as a header. All the error messages that are produced when the
# stylesheet is applied to an input document are collected together and displayed beneath this message. A 'translet' is
# the compiled form of a stylesheet (see above).
runtimeErrorKey = Translet \u30A8\u30E9\u30FC\:

# Note to translators: An attribute whose value is constrained to be a "QName" or a list of "QNames" had a value that
# was incorrect. 'QName' is an XML syntactic term that must not be translated. The substitution text contains the
# actual value of the attribute.
invalidQnameErr = \u5024\u304C QName \u307E\u305F\u306F\u7A7A\u767D\u3067\u533A\u5207\u3089\u308C\u305F QNames \u306E\u30EA\u30B9\u30C8\u3067\u306A\u3051\u308C\u3070\u306A\u3089\u306A\u3044\u5C5E\u6027\u306B\u3001\u5024 ''{0}'' \u304C\u3042\u308A\u307E\u3057\u305F\u3002

# Note to translators: An attribute whose value is required to be an "NCName". 'NCName' is an XML syntactic term that
# must not be translated. The substitution text contains the actual value of the attribute.
invalidNcnameErr = \u5024\u304C NCName \u3067\u306A\u3051\u308C\u3070\u306A\u3089\u306A\u3044\u5C5E\u6027\u306B\u3001\u5024 ''{0}'' \u304C\u3042\u308A\u307E\u3057\u305F\u3002

# Note to translators: An attribute with an incorrect value was encountered. The permitted value is one of the literal
# values "xml", "html" or "text"; it is also permitted to have the form of a QName that is not also an NCName. The terms
# "method", "xsl:output", "xml", "html" and "text" are keywords that must not be translated. The term
# "qname-but-not-ncname" is an XML syntactic term. The substitution text contains the actual value of the attribute.
invalidMethodInOutput = <xsl\:output> \u8981\u7D20\u306E method \u5C5E\u6027\u306B\u3001\u5024 ''{0}'' \u304C\u3042\u308A\u307E\u3057\u305F\u3002\u5024\u306F ''xml''\u3001''html''\u3001''text''\u3001\u307E\u305F\u306F qname-but-not-ncname \u306E\u3044\u305A\u308C\u304B\u3067\u3042\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059

jaxpGetFeatureNullName = TransformerFactory.getFeature(String name) \u306E\u6A5F\u80FD\u540D\u3092\u30CC\u30EB\u306B\u306F\u3067\u304D\u307E\u305B\u3093\u3002

jaxpSetFeatureNullName = TransformerFactory.setFeature(String name, boolean value) \u306E\u6A5F\u80FD\u540D\u3092\u30CC\u30EB\u306B\u306F\u3067\u304D\u307E\u305B\u3093\u3002

jaxpUnsupportedFeature = \u6A5F\u80FD ''{0}'' \u306F\u3053\u306E TransformerFactory \u306B\u8A2D\u5B9A\u3067\u304D\u307E\u305B\u3093\u3002

# Note to translators: This message describes an internal error in the processor. The term "byte code" is a Java
# technical term for the executable code in a Java method, and "try-catch-finally block" refers to the Java keywords
# with those names. "Outlined" is a technical term internal to XSLTC and should not be translated.
outlineErrTryCatch = Internal XSLTC error\:  the generated byte code contains a try-catch-finally block and cannot be outlined.

# Note to translators: This message describes an internal error in the processor. The terms "OutlineableChunkStart" and
# "OutlineableChunkEnd" are the names of classes internal to XSLTC and should not be translated. The message indicates
# that for every "start" there must be a corresponding "end", and vice versa, and that if one of a pair of "start" and
# "end" appears between another pair of corresponding "start" and "end", then the other half of the pair must also be
# between that same enclosing pair.
outlineErrUnbalancedMarkers = Internal XSLTC error\:  OutlineableChunkStart and OutlineableChunkEnd markers must be balanced and properly nested.

# Note to translators: This message describes an internal error in the processor. The term "byte code" is a Java
# technical term for the executable code in a Java method. The "method" that is being referred to is a Java method in a
# translet that XSLTC is generating in processing a stylesheet. The "instruction" that is being referred to is one of
# the instrutions in the Java byte code in that method. "Outlined" is a technical term internal to XSLTC and should not
# be translated.
outlineErrDeletedTarget = Internal XSLTC error\:  an instruction that was part of a block of byte code that was outlined is still referred to in the original method.

# Note to translators: This message describes an internal error in the processor. The "method" that is being referred to
# is a Java method in a translet that XSLTC is generating.
outlineErrMethodTooBig = Internal XSLTC error\:  a method in the translet exceeds the Java Virtual Machine limitation on the length of a method of 64 kilobytes.  This is usually caused by templates in a stylesheet that are very large.  Try restructuring your stylesheet to use smaller templates.

multipleStylesheetErr = \u540C\u4E00\u6587\u4EF6\u4E2D\u5B9A\u4E49\u4E86\u591A\u4E2A\u6837\u5F0F\u8868\u3002

# Note to translators: The substitution text is the name of a template. The same name was used on two different
# templates in the same stylesheet.
templateRedefErr = \u6B64\u6837\u5F0F\u8868\u4E2D\u5DF2\u7ECF\u5B9A\u4E49\u4E86\u6A21\u677F\u201C{0}\u201D\u3002

# Note to translators: The substitution text is the name of a template. A reference to the template name was
# encountered, but the template is undefined.
templateUndefErr = \u6B64\u6837\u5F0F\u8868\u4E2D\u672A\u5B9A\u4E49\u6A21\u677F\u201C{0}\u201D\u3002

# Note to translators: The substitution text is the name of a variable that was defined more than once.
variableRedefErr = \u540C\u4E00\u4F5C\u7528\u57DF\u4E2D\u591A\u6B21\u5B9A\u4E49\u4E86\u53D8\u91CF\u201C{0}\u201D\u3002

# Note to translators: The substitution text is the name of a variable or parameter. A reference to the variable or
# parameter was found, but it was never defined.
variableUndefErr = \u672A\u5B9A\u4E49\u53D8\u91CF\u6216\u53C2\u6570\u201C{0}\u201D\u3002

# Note to translators: The word "class" here refers to a Java class. Processing the stylesheet required a class to be
# loaded, but it could not be found. The substitution text is the name of the class.
classNotFoundErr = \u627E\u4E0D\u5230\u7C7B\u201C{0}\u201D\u3002

# Note to translators: The word "method" here refers to a Java method. Processing the stylesheet required a reference
# to the method named by the substitution text, but it could not be found. "public" is the Java keyword.
methodNotFoundErr = \u627E\u4E0D\u5230\u5916\u90E8\u65B9\u6CD5\u201C{0}\u201D\uFF08\u5FC5\u987B\u662F public\uFF09\u3002

# Note to translators: The word "method" here refers to a Java method. Processing the stylesheet required a reference
# to the method named by the substitution text, but no method with the required types of arguments or return type could
# be found.
argumentConversionErr = \u65E0\u6CD5\u5C06\u8C03\u7528\u4E2D\u7684\u53C2\u6570\uFF0F\u8FD4\u56DE\u7C7B\u578B\u8F6C\u6362\u4E3A\u65B9\u6CD5\u201C{0}\u201D

# Note to translators: The file or URI named in the substitution text is missing.
fileNotFoundErr = \u627E\u4E0D\u5230\u6587\u4EF6\u6216 URI\u201C{0}\u201D\u3002

# Note to translators: This message is displayed when the URI mentioned in the substitution text is not well-formed
# syntactically.
invalidUriErr = URI\u201C{0}\u201D\u65E0\u6548\u3002

# Note to translators: The file or URI named in the substitution text exists but could not be opened.
fileAccessErr = \u65E0\u6CD5\u6253\u5F00\u6587\u4EF6\u6216 URI\u201C{0}\u201D\u3002

# Note to translators: <xsl:stylesheet> and <xsl:transform> are keywords that should not be translated.
missingRootErr = \u9884\u671F\u5B58\u5728 <xsl\:stylesheet> \u6216 <xsl\:transform> \u5143\u7D20\u3002

# Note to translators: The stylesheet contained a reference to a namespace prefix that was undefined. The value of the
# substitution text is the name of the prefix.
namespaceUndefErr = \u672A\u58F0\u660E\u540D\u79F0\u7A7A\u95F4\u524D\u7F00\u201C{0}\u201D\u3002

# Note to translators: The Java function named in the stylesheet could not be found.
functionResolveErr = \u65E0\u6CD5\u89E3\u6790\u5BF9\u51FD\u6570\u201C{0}\u201D\u7684\u8C03\u7528\u3002

# Note to translators: The substitution text is the name of a function. A literal string here means a constant string
# value.
needLiteralErr = \u201C{0}\u201D\u7684\u81EA\u53D8\u91CF\u5FC5\u987B\u662F\u6587\u5B57\u4E32\u3002

# Note to translators: This message indicates there was a syntactic error in the form of an XPath expression. The
# substitution text is the expression.
xpathParserErr = \u89E3\u6790 XPath \u8868\u8FBE\u5F0F\u201C{0}\u201D\u65F6\u51FA\u9519\u3002

# Note to translators: An element in the stylesheet requires a particular attribute named by the substitution text, but
# that attribute was not specified in the stylesheet.
requiredAttrErr = \u7F3A\u5C11\u5FC5\u9700\u7684\u5C5E\u6027\u201C{0}\u201D\u3002

# Note to translators: This message indicates that a character not permitted in an XPath expression was encountered.
# The substitution text is the offending character.
illegalCharErr = XPath \u8868\u8FBE\u5F0F\u4E2D\u7684\u5B57\u7B26\u201C{0}\u201D\u975E\u6CD5\u3002

# Note to translators: A processing instruction is a mark-up item in an XML document that request some behaviour of an
# XML processor. The form of the name of was invalid in this case, and the substitution text is the name.
illegalPiErr = \u5904\u7406\u6307\u4EE4\u7684\u540D\u79F0\u201C{0}\u201D\u975E\u6CD5\u3002

# Note to translators: This message is reported if the stylesheet being processed attempted to construct an XML document
# with an attribute in a place other than on an element. The substitution text specifies the name of the attribute.
strayAttributeErr = \u5C5E\u6027\u201C{0}\u201D\u5728\u5143\u7D20\u5916\u3002

# Note to translators: An attribute that wasn't recognized was specified on an element in the stylesheet. The attribute
# is named by the substitution text.
illegalAttributeErr = \u5C5E\u6027\u201C{0}\u201D\u975E\u6CD5\u3002

# Note to translators: "import" and "include" are keywords that should not be translated. This messages indicates that
# the stylesheet named in the substitution text imported or included itself either directly or indirectly.
circularIncludeErr = \u5FAA\u73AF import\uFF0Finclude\u3002\u5DF2\u88C5\u5165\u6837\u5F0F\u8868\u201C{0}\u201D\u3002

# Note to translators: A result-tree fragment is a portion of a resulting XML document represented as a tree.
# "<xsl:sort>" is a keyword and should not be translated.
resultTreeSortErr = \u65E0\u6CD5\u5BF9\u7ED3\u679C\u6811\u7247\u6BB5\u6392\u5E8F\uFF08<xsl\:sort> \u5143\u7D20\u88AB\u5FFD\u7565\uFF09\u3002\u5FC5\u987B\u5728\u521B\u5EFA\u7ED3\u679C\u6811\u65F6\u5BF9\u8282\u70B9\u8FDB\u884C\u6392\u5E8F\u3002

# Note to translators: A name can be given to a particular style to be used to format decimal values. The substitution
# text gives the name of such a style for which more than one declaration was encountered.
symbolsRedefErr = \u5DF2\u7ECF\u5B9A\u4E49\u4E86\u5341\u8FDB\u5236\u683C\u5F0F\u7F16\u6392\u201C{0}\u201D\u3002

# Note to translators: The stylesheet version named in the substitution text is not supported.
xslVersionErr = XSLTC \u4E0D\u652F\u6301 XSL V{0}\u3002

# Note to translators: The definitions of one or more variables or parameters depend on one another.
circularVariableErr = \u201C{0}\u201D\u4E2D\u7684\u5FAA\u73AF\u53D8\u91CF\uFF0F\u53C2\u6570\u5F15\u7528\u3002

# Note to translators: The operator in an expresion with two operands was not recognized.
illegalBinaryOpErr = \u4E8C\u8FDB\u5236\u8868\u8FBE\u5F0F\u7684\u8FD0\u7B97\u7B26\u672A\u77E5\u3002

# Note to translators: This message is produced if a reference to a function has too many or too few arguments.
illegalArgErr = \u51FD\u6570\u8C03\u7528\u7684\u53C2\u6570\u975E\u6CD5\u3002

# Note to translators: "document()" is the name of function and must not be translated. A node-set is a set of the nodes
# in the tree representation of an XML document.
documentArgErr = \u51FD\u6570 document() \u7684\u7B2C\u4E8C\u4E2A\u53C2\u6570\u5FC5\u987B\u662F\u8282\u70B9\u96C6\u3002

# Note to translators: "<xsl:when>" and "<xsl:choose>" are keywords and should not be translated. This message describes
# a syntax error in the stylesheet.
missingWhenErr = <xsl\:choose> \u4E2D\u81F3\u5C11\u8981\u6709\u4E00\u4E2A <xsl\:when> \u5143\u7D20\u3002

# Note to translators: "<xsl:otherwise>" and "<xsl:choose>" are keywords and should not be translated. This message
# describes a syntax error in the stylesheet.
multipleOtherwiseErr = <xsl\:choose> \u4E2D\u53EA\u5141\u8BB8\u6709\u4E00\u4E2A <xsl\:otherwise> \u5143\u7D20\u3002

# Note to translators: "<xsl:otherwise>" and "<xsl:choose>" are keywords and should not be translated. This message
# describes a syntax error in the stylesheet.
strayOtherwiseErr = <xsl\:otherwise> \u53EA\u80FD\u5728 <xsl\:choose> \u4E2D\u4F7F\u7528\u3002

# Note to translators: "<xsl:when>" and "<xsl:choose>" are keywords and should not be translated. This message describes
# a syntax error in the stylesheet.
strayWhenErr = <xsl\:when> \u53EA\u80FD\u5728 <xsl\:choose> \u4E2D\u4F7F\u7528\u3002

# Note to translators: "<xsl:when>", "<xsl:otherwise>" and "<xsl:choose>" are keywords and should not be translated.
# This message describes a syntax error in the stylesheet.
whenElementErr = <xsl\:choose> \u4E2D\u53EA\u5141\u8BB8\u4F7F\u7528 <xsl\:when> \u548C <xsl\:otherwise>\u3002

# Note to translators: "<xsl:attribute-set>" and "name" are keywords that should not be translated.
unnamedAttribsetErr = <xsl\:attribute-set> \u7F3A\u5C11\u201Cname\u201D\u5C5E\u6027\u3002

# Note to translators: An element in the stylesheet contained an element of a type that it was not permitted to contain.
illegalChildErr = \u5B50\u5143\u7D20\u975E\u6CD5\u3002

# Note to translators: The stylesheet tried to create an element with a name that was not a valid XML name. The
# substitution text contains the name.
illegalElemNameErr = \u4E0D\u80FD\u8C03\u7528\u5143\u7D20\u201C{0}\u201D

# Note to translators: The stylesheet tried to create an attribute with a name that was not a valid XML name. The
# substitution text contains the name.
illegalAttrNameErr = \u4E0D\u80FD\u8C03\u7528\u5C5E\u6027\u201C{0}\u201D

# Note to translators: The children of the outermost element of a stylesheet are referred to as top-level elements. No
# text should occur within that outermost element unless it is within a top-level element. This message indicates that
# that constraint was violated. "<xsl:stylesheet>" is a keyword that should not be translated.
illegalTextNodeErr = \u6587\u672C\u6570\u636E\u5728\u9876\u7EA7 <xsl\:stylesheet> \u5143\u7D20\u5916\u3002

# Note to translators: JAXP is an acronym for the Java API for XML Processing. This message indicates that the XML
# parser provided to XSLTC to process the XML input document had a configuration problem.
saxParserConfigErr = JAXP \u89E3\u6790\u5668\u6CA1\u6709\u6B63\u786E\u914D\u7F6E

# Note to translators: The substitution text names the internal error encountered.
internalErr = \u4E0D\u53EF\u6062\u590D\u7684 XSLTC \u5185\u90E8\u9519\u8BEF\uFF1A\u201C{0}\u201D

# Note to translators: The stylesheet contained an element that was not recognized as part of the XSL syntax. The
# substitution text gives the element name.
unsupportedXslErr = \u4E0D\u53D7\u652F\u6301\u7684 XSL \u5143\u7D20\u201C{0}\u201D\u3002

# Note to translators: The stylesheet referred to an extension to the XSL syntax and indicated that it was defined by
# XSLTC, but XSTLC does not recognized the particular extension named. The substitution text gives the extension name.
unsupportedExtErr = \u672A\u88AB\u8BC6\u522B\u7684 XSLTC \u6269\u5C55\u540D\u201C{0}\u201D\u3002

# Note to translators: The XML document given to XSLTC as a stylesheet was not, in fact, a stylesheet. XSLTC is able to
# detect that in this case because the outermost element in the stylesheet has to be declared with respect to the XSL
# namespace URI, but no declaration for that namespace was seen.
missingXsltUriErr = \u8F93\u5165\u6587\u6863\u4E0D\u662F\u6837\u5F0F\u8868\uFF08XSL \u540D\u79F0\u7A7A\u95F4\u6CA1\u6709\u5728\u6839\u5143\u7D20\u4E2D\u58F0\u660E\uFF09\u3002

# Note to translators: XSLTC could not find the stylesheet document with the name specified by the substitution text.
missingXsltTargetErr = \u627E\u4E0D\u5230\u6837\u5F0F\u8868\u76EE\u6807\u201C{0}\u201D\u3002

# Note to translators: This message represents an internal error in condition in XSLTC. The substitution text is the
# class name in XSLTC that is missing some functionality.
notImplementedErr = \u6CA1\u6709\u5B9E\u73B0\uFF1A\u201C{0}\u201D\u3002

# Note to translators: The XML document given to XSLTC as a stylesheet was not, in fact, a stylesheet.
notStylesheetErr = \u8F93\u5165\u6587\u6863\u4E0D\u5305\u542B XSL \u6837\u5F0F\u8868\u3002

# Note to translators: The element named in the substitution text was encountered in the stylesheet but is not
# recognized.
elementParseErr = \u65E0\u6CD5\u89E3\u6790\u5143\u7D20\u201C{0}\u201D

# Note to translators: "use", "<key>", "node", "node-set", "string" and "number" are keywords in this context and should
# not be translated. This message indicates that the value of the "use" attribute was not one of the permitted values.
keyUseAttrErr = <key> \u7684 use \u5C5E\u6027\u5FC5\u987B\u662F node\u3001node-set\u3001string \u6216 number\u3002

# Note to translators: An XML document can specify the version of the XML specification to which it adheres. This
# message indicates that the version specified for the output document was not valid.
outputVersionErr = \u8F93\u51FA XML \u6587\u6863\u7684\u7248\u672C\u5E94\u5F53\u662F 1.0

# Note to translators: The operator in a comparison operation was not recognized.
illegalRelatOpErr = \u5173\u7CFB\u8868\u8FBE\u5F0F\u7684\u8FD0\u7B97\u7B26\u672A\u77E5

# Note to translators: An attribute set defines as a set of XML attributes that can be added to an element in the output
# XML document as a group. This message is reported if the name specified was not used to declare an attribute set. The
# substitution text is the name that is in error.
attribsetUndefErr = \u8BD5\u56FE\u4F7F\u7528\u4E0D\u5B58\u5728\u7684\u5C5E\u6027\u96C6\u201C{0}\u201D\u3002

# Note to translators: The term "attribute value template" is a term defined by XSLT which describes the value of an
# attribute that is determined by an XPath expression. The message indicates that the expression was syntactically
# incorrect; the substitution text contains the expression that was in error.
attrValTemplateErr = \u65E0\u6CD5\u89E3\u6790\u5C5E\u6027\u503C\u6A21\u677F\u201C{0}\u201D\u3002

# Note to translators: ???
unknownSigTypeErr = \u7C7B\u201C{0}\u201D\u7684\u7279\u5F81\u7B26\u4E2D\u7684\u6570\u636E\u7C7B\u578B\u672A\u77E5\u3002

# Note to translators: The substitution text refers to data types. The message is displayed if a value in a particular
# context needs to be converted to type {1}, but that's not possible for a value of type {0}.
dataConversionErr = \u65E0\u6CD5\u5C06\u6570\u636E\u7C7B\u578B\u201C{0}\u201D\u8F6C\u6362\u6210\u201C{1}\u201D\u3002

# Note to translators: "Templates" is a Java class name that should not be translated.
noTransletClassErr = \u6B64 Templates \u4E0D\u5305\u542B\u6709\u6548\u7684 translet \u7C7B\u5B9A\u4E49\u3002

# Note to translators: "Templates" is a Java class name that should not be translated.
noMainTransletErr = \u6B64 Templates \u4E0D\u5305\u542B\u540D\u4E3A\u201C{0}\u201D\u7684\u7C7B\u3002

# Note to translators: The substitution text is the name of a class.
transletClassErr = \u65E0\u6CD5\u88C5\u5165 translet \u7C7B\u201C{0}\u201D\u3002

transletObjectErr = Translet \u7C7B\u5DF2\u88C5\u5165\uFF0C\u4F46\u65E0\u6CD5\u521B\u5EFA translet \u5B9E\u4F8B\u3002

# Note to translators: "ErrorListener" is a Java interface name that should not be translated. The message indicates
# that the user tried to set an ErrorListener object on object of the class named in the substitution text with "null"
# Java value.
errorListenerNullErr = \u8BD5\u56FE\u5C06\u201C{0}\u201D\u7684 ErrorListener \u8BBE\u7F6E\u4E3A\u7A7A

# Note to translators: StreamSource, SAXSource and DOMSource are Java interface names that should not be translated.
jaxpUnknownSourceErr = XSLTC \u53EA\u652F\u6301 StreamSource\u3001SAXSource \u548C DOMSource

# Note to translators: "Source" is a Java class name that should not be translated. The substitution text is the name of
# Java method.
jaxpNoSourceErr = \u4F20\u9012\u7ED9\u201C{0}\u201D\u7684\u6E90\u5BF9\u8C61\u6CA1\u6709\u5185\u5BB9\u3002

# Note to translators: The message indicates that XSLTC failed to compile the stylesheet into a translet (class file).
jaxpCompileErr = \u65E0\u6CD5\u7F16\u8BD1\u6837\u5F0F\u8868

# Note to translators: "TransformerFactory" is a class name. In this context, an attribute is a property or setting of
# the TransformerFactory object. The substitution text is the name of the unrecognised attribute. The method used to
# retrieve the attribute is "getAttribute", so it's not clear whether it would be best to translate the term
# "attribute".
jaxpInvalidAttrErr = TransformerFactory \u65E0\u6CD5\u8BC6\u522B\u5C5E\u6027\u201C{0}\u201D\u3002

# Note to translators: "setResult()" and "startDocument()" are Java method names that should not be translated.
jaxpSetResultErr = setResult() \u5FC5\u987B\u5728 startDocument() \u4E4B\u524D\u8C03\u7528\u3002

# Note to translators: "Transformer" is a Java interface name that should not be translated. A Transformer object should
# contained a reference to a translet object in order to be used for transformations; this message is produced if that
# requirement is not met.
jaxpNoTransletErr = Transformer \u6CA1\u6709\u5C01\u88C5\u7684 translet \u5BF9\u8C61\u3002

# Note to translators: The XML document that results from a transformation needs to be sent to an output handler object;
# this message is produced if that requirement is not met.
jaxpNoHandlerErr = \u6CA1\u6709\u4E3A\u8F6C\u6362\u7ED3\u679C\u5B9A\u4E49\u8F93\u51FA\u5904\u7406\u5668\u3002

# Note to translators: "Result" is a Java interface name in this context. The substitution text is a method name.
jaxpNoResultErr = \u4F20\u9012\u7ED9\u201C{0}\u201D\u7684 Result \u5BF9\u8C61\u65E0\u6548\u3002

# Note to translators: "Transformer" is a Java interface name. The user's program attempted to access an unrecognized
# property with the name specified in the substitution text. The method used to retrieve the property is
# "getOutputProperty", so it's not clear whether it would be best to translate the term "property".
jaxpUnknownPropErr = \u8BD5\u56FE\u8BBF\u95EE\u65E0\u6548\u7684 Transformer \u5C5E\u6027\u201C{0}\u201D\u3002

# Note to translators: SAX2DOM is the name of a Java class that should not be translated. This is an adapter in the
# sense that it takes a DOM object and converts it to something that uses the SAX API.
sax2domAdapterErr = \u65E0\u6CD5\u521B\u5EFA SAX2DOM \u9002\u914D\u5668\uFF1A\u201C{0}\u201D\u3002

# Note to translators: "XSLTCSource.build()" is a Java method name. "systemId" is an XML term that is short for "system
# identification".
xsltcSourceErr = \u6CA1\u6709\u8BBE\u7F6E systemId \u5C31\u8C03\u7528\u4E86 XSLTCSource.build()\u3002

erResultNull = \u7ED3\u679C\u4E0D\u5E94\u4E3A\u7A7A

# Note to translators: This message indicates that the value argument of setParameter must be a valid Java Object.
jaxpInvalidSetParamValue = \u53C2\u6570 {0} \u7684\u503C\u5FC5\u987B\u4E3A\u6709\u6548\u7684 Java \u5BF9\u8C61

compileStdinErr = -i \u9009\u9879\u5FC5\u987B\u4E0E -o \u9009\u9879\u4E00\u8D77\u4F7F\u7528\u3002

# Note to translators: This message contains usage information for a means of invoking XSLTC from the command-line. The
# message is formatted for presentation in English. The strings <output>, <directory>, etc. indicate user-specified
# argument values, and can be translated - the argument <package> refers to a Java package, so it should be handled in
# the same way the term is handled for JDK documentation.
compileUsageStr = SYNOPSIS\n   java de.lyca.xalan.xsltc.cmdline.Compile [-o <output>]\n      [-d <directory>] [-j <jarfile>] [-p <package>]\n      [-n] [-x] [-u] [-v] [-h] { <stylesheet> | -i }\n\nOPTIONS\n   -o <output>    \u5C06\u540D\u79F0 <output> \u6307\u5B9A\u7ED9\u751F\u6210\u7684\n                  translet\u3002\u7F3A\u7701\u60C5\u51B5\u4E0B\uFF0Ctranslet \u540D\u79F0\n                  \u6D3E\u751F\u81EA <stylesheet> \u540D\u79F0\u3002\n                  \u5982\u679C\u7F16\u8BD1\u591A\u4E2A\u6837\u5F0F\u8868\uFF0C\u5219\u5FFD\u7565\u6B64\u9009\u9879\u3002\n-d <directory> \u6307\u5B9A translet \u7684\u76EE\u6807\u76EE\u5F55\n   -j <jarfile>   \u5C06 translet \u7C7B\u6253\u5305\u6210\u547D\u540D\u4E3A <jarfile>\n                  \u7684 jar \u6587\u4EF6\n   -p <package>   \u4E3A\u6240\u6709\u751F\u6210\u7684 translet \u7C7B\n                  \u6307\u5B9A\u8F6F\u4EF6\u5305\u540D\u79F0\u7684\u524D\u7F00\u3002\n   -n             \u542F\u7528\u6A21\u677F\u5728\u7EBF\uFF08\u5E73\u5747\u7F3A\u7701\n                  \u884C\u4E3A\u66F4\u4F73\uFF09\u3002\n   -x             \u6253\u5F00\u989D\u5916\u8C03\u8BD5\u6D88\u606F\u8F93\u51FA\n   -u             \u5C06 <stylesheet> \u81EA\u53D8\u91CF\u89E3\u91CA\u4E3A URL\n   -i             \u5F3A\u5236\u7F16\u8BD1\u5668\u4ECE stdin \u8BFB\u5165\u6837\u5F0F\u8868\n   -v             \u6253\u5370\u7F16\u8BD1\u5668\u7684\u7248\u672C\n   -h             \u6253\u5370\u6B64\u7528\u6CD5\u8BED\u53E5\n

# Note to translators: This message contains usage information for a means of invoking XSLTC from the command-line. The
# message is formatted for presentation in English. The strings <jarfile>, <document>, etc. indicate user-specified
# argument values, and can be translated - the argument <class> refers to a Java class, so it should be handled in the
# same way the term is handled for JDK documentation.
transformUsageStr = SYNOPSIS \n   java de.lyca.xalan.xsltc.cmdline.Transform [-j <jarfile>]\n      [-x] [-n <iterations>] {-u <document_url> | <document>}\n      <class> [<param1>\=<value1> ...]\n\n   \u4F7F\u7528 translet <class> \u6765\u8F6C\u6362\u6307\u5B9A\u4E3A <document>\n   \u7684 XML \u6587\u6863\u3002translet <class> \u8981\u4E48\u5728\n   \u7528\u6237\u7684 CLASSPATH \u4E2D\uFF0C\u8981\u4E48\u5728\u4EFB\u610F\u6307\u5B9A\u7684 <jarfile> \u4E2D\u3002\nOPTIONS\n   -j <jarfile>    \u6307\u5B9A\u88C5\u5165 translet \u7684 jarfile\n   -x              \u6253\u5F00\u989D\u5916\u8C03\u8BD5\u6D88\u606F\u8F93\u51FA\n   -n <iterations> \u8FD0\u884C\u8F6C\u6362\u8FC7\u7A0B <iterations> \u6570\u6B21\u5E76\n                   \u663E\u793A\u6982\u8981\u5206\u6790\u4FE1\u606F\n   -u <document_url> \u5C06 XML \u8F93\u5165\u6307\u5B9A\u4E3A URL\n

# Note to translators: "<xsl:sort>", "<xsl:for-each>" and "<xsl:apply-templates>" are keywords that should not be
# translated. The message indicates that an xsl:sort element must be a child of one of the other kinds of elements
# mentioned.
straySortErr = <xsl\:sort> \u53EA\u80FD\u5728 <xsl\:for-each> \u6216 <xsl\:apply-templates> \u4E2D\u4F7F\u7528\u3002

# Note to translators: The message indicates that the encoding requested for the output document was on that requires
# support that is not available from the Java Virtual Machine being used to execute the program.
unsupportedEncoding = \u6B64 JVM \u4E2D\u4E0D\u652F\u6301\u8F93\u51FA\u7F16\u7801\u201C{0}\u201D\u3002

# Note to translators: The message indicates that the XPath expression named in the substitution text was not well
# formed syntactically.
syntaxErr = \u201C{0}\u201D\u4E2D\u51FA\u73B0\u8BED\u6CD5\u9519\u8BEF\u3002

# Note to translators: The substitution text is the name of a Java class. The term "constructor" here is the Java term.
# The message is displayed if XSLTC could not find a constructor for the specified class.
constructorNotFound = \u627E\u4E0D\u5230\u5916\u90E8\u6784\u9020\u51FD\u6570\u201C{0}\u201D\u3002

# Note to translators: "static" is the Java keyword. The substitution text is the name of a function. The first argument
# of that function is not of the required type.
noJavaFunctThisRef = \u975E static Java \u51FD\u6570\u201C{0}\u201D\u7684\u7B2C\u4E00\u4E2A\u53C2\u6570\u4E0D\u662F\u6709\u6548\u7684\u5BF9\u8C61\u5F15\u7528\u3002

# Note to translators: An XPath expression was not of the type required in a particular context. The substitution text
# is the expression that was in error.
typeCheckErr = \u68C0\u67E5\u8868\u8FBE\u5F0F\u201C{0}\u201D\u7684\u7C7B\u578B\u65F6\u51FA\u9519\u3002

# Note to translators: An XPath expression was not of the type required in a particular context. However, the location
# of the problematic expression is unknown.
typeCheckUnkLocErr = \u68C0\u67E5\u672A\u77E5\u4F4D\u7F6E\u7684\u8868\u8FBE\u5F0F\u7C7B\u578B\u65F6\u51FA\u9519\u3002

# Note to translators: The substitution text is the name of a commandline option that was not recognized.
illegalCmdlineOptionErr = \u547D\u4EE4\u884C\u9009\u9879\u201C{0}\u201D\u65E0\u6548\u3002

# Note to translators: The substitution text is the name of a commandline option.
cmdlineOptMissingArgErr = \u547D\u4EE4\u884C\u9009\u9879\u201C{0}\u201D\u7F3A\u5C11\u5FC5\u9700\u7684\u81EA\u53D8\u91CF\u3002

# Note to translators: This message is used to indicate the severity of another message. The substitution text contains
# two error messages. The spacing before the second substitution text indents it the same amount as the first in
# English.
warningPlusWrappedMsg = \u8B66\u544A\uFF1A\u201C{0}\u201D\n    \uFF1A{1}

# Note to translators: This message is used to indicate the severity of another message. The substitution text is an
# error message.
warningMsg = \u8B66\u544A\uFF1A\u201C{0}\u201D

# Note to translators: This message is used to indicate the severity of another message. The substitution text contains
# two error messages. The spacing before the second substitution text indents it the same amount as the first in
# English.
fatalErrPlusWrappedMsg = \u81F4\u547D\u9519\u8BEF\uFF1A\u201C{0}\u201D\n        \uFF1A{1}

# Note to translators: This message is used to indicate the severity of another message. The substitution text is an
# error message.
fatalErrMsg = \u81F4\u547D\u9519\u8BEF\uFF1A\u201C{0}\u201D

# Note to translators: This message is used to indicate the severity of another message. The substitution text contains
# two error messages. The spacing before the second substitution text indents it the same amount as the first in
# English.
errorPlusWrappedMsg = \u9519\u8BEF\uFF1A{0}\u201C\n    \uFF1A{1}

# Note to translators: This message is used to indicate the severity of another message. The substitution text is an
# error message.
errorMsg = \u9519\u8BEF\uFF1A\u201C{0}\u201D

# Note to translators: The substitution text is the name of a class.
transformWithTransletStr = \u4F7F\u7528 translet\u201C{0}\u201D\u8F6C\u6362

# Note to translators: The first substitution is the name of a class, while the second substitution is the name of a
# jar file.
transformWithJarStr = \u4F7F\u7528 translet\u201C{0}\u201D\u4ECE jar \u6587\u4EF6\u201C{1}\u201D\u8F6C\u6362

# Note to translators: "TransformerFactory" is the name of a Java interface and must not be translated. The substitution
# text is the name of the class that could not be instantiated.
couldNotCreateTransFact = \u65E0\u6CD5\u521B\u5EFA TransformerFactory \u7C7B\u201C{0}\u201D\u7684\u5B9E\u4F8B\u3002

# Note to translators: This message is produced when the user specified a name for the translet class that contains
# characters that are not permitted in a Java class name. The substitution text "{0}" specifies the name the user
# requested, while "{1}" specifies the name the processor used instead.
transletNameJavaConflict = \u7531\u4E8E\u540D\u79F0\u201C{0}\u201D\u5305\u542B Java \u7C7B\u540D\u79F0\u4E2D\u4E0D\u5141\u8BB8\u4F7F\u7528\u7684\u5B57\u7B26\uFF0C\u56E0\u6B64\u4E0D\u80FD\u5C06\u5B83\u7528\u4F5C translet \u7C7B\u7684\u540D\u79F0\u3002\u4F7F\u7528\u540D\u79F0\u201C{1}\u201D\u6765\u4EE3\u66FF\u3002

# Note to translators: The following message is used as a header. All the error messages are collected together and
# displayed beneath this message.
compilerErrorKey = \u7F16\u8BD1\u5668\u9519\u8BEF\uFF1A

# Note to translators: The following message is used as a header. All the warning messages are collected together and
# displayed beneath this message.
compilerWarningKey = \u7F16\u8BD1\u5668\u8B66\u544A\uFF1A

# Note to translators: The following message is used as a header. All the error messages that are produced when the
# stylesheet is applied to an input document are collected together and displayed beneath this message. A 'translet' is
# the compiled form of a stylesheet (see above).
runtimeErrorKey = Translet \u9519\u8BEF\uFF1A

# Note to translators: An attribute whose value is constrained to be a "QName" or a list of "QNames" had a value that
# was incorrect. 'QName' is an XML syntactic term that must not be translated. The substitution text contains the
# actual value of the attribute.
invalidQnameErr = \u503C\u5FC5\u987B\u4E3A QName \u6216\u4E3A\u7528\u7A7A\u683C\u5206\u5F00\u7684 QName \u5217\u8868\u7684\u5C5E\u6027\u5177\u6709\u503C\u201C{0}\u201D

# Note to translators: An attribute whose value is required to be an "NCName". 'NCName' is an XML syntactic term that
# must not be translated. The substitution text contains the actual value of the attribute.
invalidNcnameErr = \u503C\u5FC5\u987B\u4E3A NCName \u7684\u5C5E\u6027\u5177\u6709\u503C\u201C{0}\u201D

# Note to translators: An attribute with an incorrect value was encountered. The permitted value is one of the literal
# values "xml", "html" or "text"; it is also permitted to have the form of a QName that is not also an NCName. The terms
# "method", "xsl:output", "xml", "html" and "text" are keywords that must not be translated. The term
# "qname-but-not-ncname" is an XML syntactic term. The substitution text contains the actual value of the attribute.
invalidMethodInOutput = <xsl\:output> \u5143\u7D20\u7684 method \u5C5E\u6027\u5177\u6709\u503C\u201C{0}\u201D\u3002\u6B64\u503C\u5FC5\u987B\u4E3A\u201Cxml\u201D\u3001\u201Chtml\u201D\u3001\u201Ctext\u201D \u6216 qname-but-not-ncname \u4E2D\u7684\u4E00\u4E2A

jaxpGetFeatureNullName = \u5728 TransformerFactory.getFeature(String name) \u4E2D\u7279\u5F81\u540D\u4E0D\u80FD\u4E3A\u7A7A\u3002

jaxpSetFeatureNullName = \u5728 TransformerFactory.setFeature(String name, boolean value) \u4E2D\u7279\u5F81\u540D\u4E0D\u80FD\u4E3A\u7A7A\u3002

jaxpUnsupportedFeature = \u65E0\u6CD5\u5BF9\u6B64 TransformerFactory \u8BBE\u7F6E\u7279\u5F81\u201C{0}\u201D\u3002

# Note to translators: This message describes an internal error in the processor. The term "byte code" is a Java
# technical term for the executable code in a Java method, and "try-catch-finally block" refers to the Java keywords
# with those names. "Outlined" is a technical term internal to XSLTC and should not be translated.
outlineErrTryCatch = Internal XSLTC error\:  the generated byte code contains a try-catch-finally block and cannot be outlined.

# Note to translators: This message describes an internal error in the processor. The terms "OutlineableChunkStart" and
# "OutlineableChunkEnd" are the names of classes internal to XSLTC and should not be translated. The message indicates
# that for every "start" there must be a corresponding "end", and vice versa, and that if one of a pair of "start" and
# "end" appears between another pair of corresponding "start" and "end", then the other half of the pair must also be
# between that same enclosing pair.
outlineErrUnbalancedMarkers = Internal XSLTC error\:  OutlineableChunkStart and OutlineableChunkEnd markers must be balanced and properly nested.

# Note to translators: This message describes an internal error in the processor. The term "byte code" is a Java
# technical term for the executable code in a Java method. The "method" that is being referred to is a Java method in a
# translet that XSLTC is generating in processing a stylesheet. The "instruction" that is being referred to is one of
# the instrutions in the Java byte code in that method. "Outlined" is a technical term internal to XSLTC and should not
# be translated.
outlineErrDeletedTarget = Internal XSLTC error\:  an instruction that was part of a block of byte code that was outlined is still referred to in the original method.

# Note to translators: This message describes an internal error in the processor. The "method" that is being referred to
# is a Java method in a translet that XSLTC is generating.
outlineErrMethodTooBig = Internal XSLTC error\:  a method in the translet exceeds the Java Virtual Machine limitation on the length of a method of 64 kilobytes.  This is usually caused by templates in a stylesheet that are very large.  Try restructuring your stylesheet to use smaller templates.
